{"version":3,"file":"static/chunks/7119.a395fc6a8fc1b2a2.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/qrcode.react/lib/esm/index.js","webpack://_N_E/../../packages/ui-wallets/src/components/QRCode.tsx","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n","import { QRCodeSVG } from 'qrcode.react'\n\nconst QRCode = ({ url, image }: { url: string; image?: string }) => (\n  <QRCodeSVG\n    value={url}\n    size={288}\n    level=\"H\"\n    includeMargin\n    imageSettings={\n      image\n        ? {\n            src: image,\n            x: undefined,\n            y: undefined,\n            height: 72,\n            width: 72,\n            excavate: true,\n          }\n        : undefined\n    }\n  />\n)\n\nexport default QRCode\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[7119],{\n\n/***/ 87119:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ components_QRCode; }\n});\n\n// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(52322);\n// EXTERNAL MODULE: ../../node_modules/react/index.js\nvar react = __webpack_require__(2784);\n;// CONCATENATED MODULE: ../../node_modules/qrcode.react/lib/esm/index.js\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\n\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ react.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ react.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ react.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ react.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\n\n\n;// CONCATENATED MODULE: ../../packages/ui-wallets/src/components/QRCode.tsx\n\n\nvar QRCode_QRCode = function(param) {\n    var url = param.url, image = param.image;\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(QRCodeSVG, {\n        value: url,\n        size: 288,\n        level: \"H\",\n        includeMargin: true,\n        imageSettings: image ? {\n            src: image,\n            x: undefined,\n            y: undefined,\n            height: 72,\n            width: 72,\n            excavate: true\n        } : undefined\n    });\n};\n/* harmony default export */ var components_QRCode = (QRCode_QRCode);\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","r","d","components_QRCode","qrcodegen2","qrcodegen","jsx_runtime","react","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","size","row","i","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","length","dataCapacityBits","assert","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","_Ecc","LOW","QrCode2","_Mode","numBitsCharCount","KANJI","QrSegment2","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","QRCodeSVG","props","level","bgColor","fgColor","includeMargin","imageSettings","otherProps","cells","margin","numCells","calculatedImageSettings","getImageSettings","defaultSize","scale","w","width","h","height","excavation","excavate","floorX","floorY","image","cell","createElement","xlinkHref","src","preserveAspectRatio","fgPath","generatePath","ops","start","join","viewBox","fill","shapeRendering","Path2D","addPath","e","param","url","jsx","undefined"],"sourceRoot":""}