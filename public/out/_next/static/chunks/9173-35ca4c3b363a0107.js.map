{"version":3,"file":"static/chunks/9173-35ca4c3b363a0107.js","mappings":"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","sources":["webpack://_N_E/./src/config/constants/campaigns.ts","webpack://_N_E/./src/state/achievements/helpers.ts","webpack://_N_E/./src/state/profile/helpers.ts","webpack://_N_E/./src/state/profile/hooks.ts","webpack://_N_E/./src/config/constants/teams.ts","webpack://_N_E/./src/state/teams/helpers.ts","webpack://_N_E/./src/utils/achievements.ts","webpack://_N_E/<anon>"],"sourcesContent":["import { Campaign } from './types'\n\n/**\n * id: The campaign id (required)\n * type: The type of the achievement\n * title: A string or an object to be translated.\n * Note: If the value is a string it is likely used as data in a translation object\n *\n * badge: Achievement avatar\n */\n\nconst campaigns: Campaign[] = [\n  {\n    id: '511110000',\n    type: 'ifo',\n    title: 'Kalmar',\n    badge: 'ifo-kalm.svg',\n  },\n  {\n    id: '511100000',\n    type: 'ifo',\n    title: 'Hotcross',\n    badge: 'ifo-hotcross.svg',\n  },\n  {\n    id: '511090000',\n    type: 'ifo',\n    title: 'Horizon Protocol',\n    badge: 'ifo-hzn.svg',\n  },\n  {\n    id: '511080000',\n    type: 'ifo',\n    title: 'Belt',\n    badge: 'ifo-belt.svg',\n  },\n  {\n    id: '511070000',\n    type: 'ifo',\n    title: 'Yieldwatch',\n    badge: 'ifo-watch.svg',\n  },\n  {\n    id: '511060000',\n    type: 'ifo',\n    title: 'Berry',\n    badge: 'ifo-bry.svg',\n  },\n  {\n    id: '511050000',\n    type: 'ifo',\n    title: 'Soteria',\n    badge: 'ifo-wsote.svg',\n  },\n  {\n    id: '511040000',\n    type: 'ifo',\n    title: 'Helmet',\n    badge: 'ifo-helmet.svg',\n  },\n  {\n    id: '511030000',\n    type: 'ifo',\n    title: 'Tenet',\n    badge: 'ifo-ten.svg',\n  },\n  {\n    id: '511020000',\n    type: 'ifo',\n    title: 'Ditto',\n    badge: 'ifo-ditto.svg',\n  },\n  {\n    id: '511010000',\n    type: 'ifo',\n    title: 'Blink',\n    badge: 'ifo-blink.svg',\n  },\n  {\n    id: '512010001',\n    type: 'teambattle',\n    title: 'Easter Champion: Gold',\n    badge: 'easter-champion-gold.svg',\n  },\n  {\n    id: '512010002',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010003',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010004',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010005',\n    type: 'teambattle',\n    title: 'Easter Participant: Gold',\n    badge: 'easter-participant-gold.svg',\n  },\n  {\n    id: '512010006',\n    type: 'teambattle',\n    title: 'Easter Champion: Silver',\n    badge: 'easter-champion-silver.svg',\n  },\n  {\n    id: '512010007',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010008',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010009',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010010',\n    type: 'teambattle',\n    title: 'Easter Participant: Silver',\n    badge: 'easter-participant-silver.svg',\n  },\n  {\n    id: '512010011',\n    type: 'teambattle',\n    title: 'Easter Champion: Bronze',\n    badge: 'easter-champion-bronze.svg',\n  },\n  {\n    id: '512010012',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010013',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010014',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010015',\n    type: 'teambattle',\n    title: 'Easter Participant: Bronze',\n    badge: 'easter-participant-bronze.svg',\n  },\n  {\n    id: '513010001',\n    type: 'participation',\n    title: 'Syrup Soaker',\n    description: 'Took a dip in the early days of the Auto CAKE Pool',\n    badge: 'syrup-soaker.svg',\n  },\n  {\n    id: '514010001',\n    type: 'participation',\n    title: 'Clairvoyant',\n    description: 'Played a round of Prediction before round 12,120',\n    badge: 'clairvoyant.svg',\n  },\n  {\n    id: '515010001',\n    type: 'participation',\n    title: 'Lottie',\n    description: 'Joined a round in the early days of Lottery V2',\n    badge: 'lottie.svg',\n  },\n  {\n    id: '515020001',\n    type: 'participation',\n    title: 'Lucky',\n    description: 'Won a round in the early days of Lottery V2',\n    badge: 'lucky.svg',\n  },\n  {\n    id: '515030001',\n    type: 'participation',\n    title: 'Baller',\n    description: 'Top 100 ticket buyer in the early days of Lottery V2',\n    badge: 'baller.svg',\n  },\n  {\n    id: '516010001',\n    type: 'participation',\n    title: '1 Year',\n    description: 'Joined PancakeSwap during the first year of our journey!',\n    badge: '1-year.svg',\n  },\n  {\n    id: '516020001',\n    type: 'participation',\n    title: '2 Year',\n    description: 'Celebrate our 2nd birthday with us',\n    badge: '2-year.svg',\n  },\n  {\n    id: '511120000',\n    type: 'ifo',\n    title: 'Duelist King',\n    badge: 'ifo-dkt.svg',\n  },\n  {\n    id: '511130000',\n    type: 'ifo',\n    title: 'Mines of Dalarnia',\n    badge: 'ifo-dar.svg',\n  },\n  {\n    id: '511140000',\n    type: 'ifo',\n    title: 'FC Porto Fan Token',\n    badge: 'ifo-porto.svg',\n  },\n  {\n    id: '511150000',\n    type: 'ifo',\n    title: 'FC Santos Fan Token',\n    badge: 'ifo-santos.svg',\n  },\n  {\n    id: '512020001',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Gold',\n    badge: 'fan-token-champion-gold.svg',\n  },\n  {\n    id: '512020002',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Gold',\n    badge: 'fan-token-top-10-gold.svg',\n  },\n  {\n    id: '512020003',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Gold',\n    badge: 'fan-token-top-100-gold.svg',\n  },\n  {\n    id: '512020004',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Gold',\n    badge: 'fan-token-top-500-gold.svg',\n  },\n  {\n    id: '512020005',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Gold',\n    badge: 'fan-token-participant-gold.svg',\n  },\n  {\n    id: '512020006',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Silver',\n    badge: 'fan-token-champion-silver.svg',\n  },\n  {\n    id: '512020007',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Silver',\n    badge: 'fan-token-top-10-silver.svg',\n  },\n  {\n    id: '512020008',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Silver',\n    badge: 'fan-token-top-100-silver.svg',\n  },\n  {\n    id: '512020009',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Silver',\n    badge: 'fan-token-top-500-silver.svg',\n  },\n  {\n    id: '512020010',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Silver',\n    badge: 'fan-token-participant-silver.svg',\n  },\n  {\n    id: '512020011',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Bronze',\n    badge: 'fan-token-champion-bronze.svg',\n  },\n  {\n    id: '512020012',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Bronze',\n    badge: 'fan-token-top-10-bronze.svg',\n  },\n  {\n    id: '512020013',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Bronze',\n    badge: 'fan-token-top-100-bronze.svg',\n  },\n  {\n    id: '512020014',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Bronze',\n    badge: 'fan-token-top-500-bronze.svg',\n  },\n  {\n    id: '512020015',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Bronze',\n    badge: 'fan-token-participant-bronze.svg',\n  },\n  {\n    id: '511160000',\n    type: 'ifo',\n    title: 'Diviner Protocol',\n    badge: 'ifo-dpt.svg',\n  },\n  {\n    id: '511170000',\n    type: 'ifo',\n    title: 'Froyo Games',\n    badge: 'ifo-froyo.svg',\n  },\n  {\n    id: '511180000',\n    type: 'ifo',\n    title: 'Era7',\n    badge: 'ifo-era.svg',\n  },\n  {\n    id: '511190000',\n    type: 'ifo',\n    title: 'Duet',\n    badge: 'ifo-duet.svg',\n  },\n  {\n    id: '511200000',\n    type: 'ifo',\n    title: 'Trivia',\n    badge: 'ifo-trivia.svg',\n  },\n  {\n    id: '511300000',\n    type: 'ifo',\n    title: 'Peel',\n    badge: 'ifo-peel.svg',\n  },\n  {\n    id: '511400000',\n    type: 'ifo',\n    title: 'Wom',\n    badge: 'ifo-wom.svg',\n  },\n  {\n    id: '511500000',\n    type: 'ifo',\n    title: 'Hoop',\n    badge: 'ifo-hoop.svg',\n  },\n  {\n    id: '511600000',\n    type: 'ifo',\n    title: 'CO',\n    badge: 'ifo-co.svg',\n  },\n  {\n    id: '511700000',\n    type: 'ifo',\n    title: 'KRS',\n    badge: 'ifo-krs.svg',\n  },\n  {\n    id: '511800000',\n    type: 'ifo',\n    title: 'WMX',\n    badge: 'ifo-wmx.svg',\n  },\n  {\n    id: '511900000',\n    type: 'ifo',\n    title: 'MGP',\n    badge: 'ifo-mgp.svg',\n  },\n  {\n    id: '512030001',\n    type: 'teambattle',\n    title: 'Mobox Champion: Gold',\n    badge: 'MBOX-champion-gold.svg',\n  },\n  {\n    id: '512030002',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Gold',\n    badge: 'MBOX-top-10-gold.svg',\n  },\n  {\n    id: '512030003',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Gold',\n    badge: 'MBOX-top-100-gold.svg',\n  },\n  {\n    id: '512030004',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Gold',\n    badge: 'MBOX-top-500-gold.svg',\n  },\n  {\n    id: '512030005',\n    type: 'teambattle',\n    title: 'Mobox Participant: Gold',\n    badge: 'MBOX-participant-gold.svg',\n  },\n  {\n    id: '512030006',\n    type: 'teambattle',\n    title: 'Mobox Champion: Silver',\n    badge: 'MBOX-champion-silver.svg',\n  },\n  {\n    id: '512030007',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Silver',\n    badge: 'MBOX-top-10-silver.svg',\n  },\n  {\n    id: '512030008',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Silver',\n    badge: 'MBOX-top-100-silver.svg',\n  },\n  {\n    id: '512030009',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Silver',\n    badge: 'MBOX-top-500-silver.svg',\n  },\n  {\n    id: '512030010',\n    type: 'teambattle',\n    title: 'Mobox Participant: Silver',\n    badge: 'MBOX-participant-silver.svg',\n  },\n  {\n    id: '512030011',\n    type: 'teambattle',\n    title: 'Mobox Champion: Bronze',\n    badge: 'MBOX-champion-bronze.svg',\n  },\n  {\n    id: '512030012',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Bronze',\n    badge: 'MBOX-top-10-bronze.svg',\n  },\n  {\n    id: '512030013',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Bronze',\n    badge: 'MBOX-top-100-bronze.svg',\n  },\n  {\n    id: '512030014',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Bronze',\n    badge: 'MBOX-top-500-bronze.svg',\n  },\n  {\n    id: '512030015',\n    type: 'teambattle',\n    title: 'Mobox Participant: Bronze',\n    badge: 'MBOX-participant-bronze.svg',\n  },\n  {\n    id: '512040001',\n    type: 'teambattle',\n    title: 'MoD Champion: Gold',\n    badge: 'MoD-champion-gold.svg',\n  },\n  {\n    id: '512040002',\n    type: 'teambattle',\n    title: 'MoD Top 10: Gold',\n    badge: 'MoD-top-10-gold.svg',\n  },\n  {\n    id: '512040003',\n    type: 'teambattle',\n    title: 'MoD Top 100: Gold',\n    badge: 'MoD-top-100-gold.svg',\n  },\n  {\n    id: '512040004',\n    type: 'teambattle',\n    title: 'MoD Top 500: Gold',\n    badge: 'MoD-top-500-gold.svg',\n  },\n  {\n    id: '512040005',\n    type: 'teambattle',\n    title: 'MoD Participant: Gold',\n    badge: 'MoD-participant-gold.svg',\n  },\n  {\n    id: '512040006',\n    type: 'teambattle',\n    title: 'MoD Champion: Silver',\n    badge: 'MoD-champion-silver.svg',\n  },\n  {\n    id: '512040007',\n    type: 'teambattle',\n    title: 'MoD Top 10: Silver',\n    badge: 'MoD-top-10-silver.svg',\n  },\n  {\n    id: '512040008',\n    type: 'teambattle',\n    title: 'MoD Top 100: Silver',\n    badge: 'MoD-top-100-silver.svg',\n  },\n  {\n    id: '512040009',\n    type: 'teambattle',\n    title: 'MoD Top 500: Silver',\n    badge: 'MoD-top-500-silver.svg',\n  },\n  {\n    id: '512040010',\n    type: 'teambattle',\n    title: 'MoD Participant: Silver',\n    badge: 'MoD-participant-silver.svg',\n  },\n  {\n    id: '512040011',\n    type: 'teambattle',\n    title: 'MoD Champion: Bronze',\n    badge: 'MoD-champion-bronze.svg',\n  },\n  {\n    id: '512040012',\n    type: 'teambattle',\n    title: 'MoD Top 10: Bronze',\n    badge: 'MoD-top-10-bronze.svg',\n  },\n  {\n    id: '512040013',\n    type: 'teambattle',\n    title: 'MoD Top 100: Bronze',\n    badge: 'MoD-top-100-bronze.svg',\n  },\n  {\n    id: '512040014',\n    type: 'teambattle',\n    title: 'MoD Top 500: Bronze',\n    badge: 'MoD-top-500-bronze.svg',\n  },\n  {\n    id: '512040015',\n    type: 'teambattle',\n    title: 'MoD Participant: Bronze',\n    badge: 'MoD-participant-bronze.svg',\n  },\n]\n\n/**\n * Transform the campaign config into a map. Keeps the config the same\n * as the others and allows easy access to a campaign by id\n */\nexport const campaignMap = new Map<string, Campaign>()\n\ncampaigns.forEach((campaign) => {\n  campaignMap.set(campaign.id, campaign)\n})\n\nexport default campaigns\n","import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    if (!campaignMap.has(userPoint.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    accum.push({\n      id: userPoint.campaignId,\n      type: campaignMeta.type,\n      address: userPoint.id,\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(userPoint.points),\n    })\n    return accum\n  }, [])\n}\n","import { Profile } from 'state/types'\nimport { PancakeProfile } from 'config/abi/types/PancakeProfile'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport { getTeam } from 'state/teams/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getNftApi } from 'state/nftMarket/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst transformProfileResponse = (\n  profileResponse: Awaited<ReturnType<PancakeProfile['getUserProfile']>>,\n): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: userId.toNumber(),\n    points: numberPoints.toNumber(),\n    teamId: teamId.toNumber(),\n    tokenId: tokenId.toNumber(),\n    collectionAddress,\n    isActive,\n  }\n}\n\nexport const getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${API_PROFILE}/api/users/${address.toLowerCase()}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const profileCalls = ['hasRegistered', 'getUserProfile'].map((method) => {\n      return { address: getPancakeProfileAddress(), name: method, params: [address] }\n    })\n    const profileCallsResult = await multicallv2({\n      abi: profileABI,\n      calls: profileCalls,\n      options: { requireSuccess: false },\n    })\n    const [[hasRegistered], profileResponse] = profileCallsResult\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n    const [team, username, nftRes] = await Promise.all([\n      getTeam(teamId),\n      getUsername(address),\n      isActive ? getNftApi(collectionAddress, tokenId.toString()) : Promise.resolve(null),\n    ])\n    let nftToken: NftToken\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    if (nftRes) {\n      nftToken = {\n        tokenId: nftRes.tokenId,\n        name: nftRes.name,\n        collectionName: nftRes.collection.name,\n        collectionAddress,\n        description: nftRes.description,\n        attributes: nftRes.attributes,\n        createdAt: nftRes.createdAt,\n        updatedAt: nftRes.updatedAt,\n        image: {\n          original: nftRes.image?.original,\n          thumbnail: nftRes.image?.thumbnail,\n        },\n      }\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      collectionAddress,\n      isActive,\n      nft: nftToken,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n}\n","import { useAccount } from 'wagmi'\nimport { getAchievements } from 'state/achievements/helpers'\nimport { FetchStatus } from 'config/constants/types'\nimport useSWR, { KeyedMutator } from 'swr'\nimport { localStorageMiddleware } from 'hooks/useSWRContract'\nimport useSWRImmutable from 'swr/immutable'\nimport { getProfile, GetProfileResponse } from './helpers'\nimport { Profile } from '../types'\n\nexport const useProfileForAddress = (\n  address: string,\n  fetchConfiguration = {\n    revalidateIfStale: true,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n  },\n): {\n  profile?: Profile\n  isFetching: boolean\n  isValidating: boolean\n  refresh: KeyedMutator<GetProfileResponse>\n} => {\n  const { data, status, mutate, isValidating } = useSWR(\n    address ? [address, 'profile'] : null,\n    () => getProfile(address),\n    fetchConfiguration,\n  )\n\n  const { profile } = data ?? { profile: null }\n\n  return {\n    profile,\n    isFetching: status === FetchStatus.Fetching,\n    isValidating,\n    refresh: mutate,\n  }\n}\n\nexport const useAchievementsForAddress = (address: string) => {\n  const { data, status, mutate } = useSWRImmutable(address ? [address, 'achievements'] : null, () =>\n    getAchievements(address),\n  )\n\n  return {\n    achievements: data || [],\n    isFetching: status === FetchStatus.Fetching,\n    refresh: mutate,\n  }\n}\n\nexport const useProfile = (): {\n  profile?: Profile\n  hasProfile: boolean\n  hasActiveProfile: boolean\n  isInitialized: boolean\n  isLoading: boolean\n  refresh: KeyedMutator<GetProfileResponse>\n} => {\n  const { address: account } = useAccount()\n  const { data, status, mutate } = useSWRImmutable(account ? [account, 'profile'] : null, () => getProfile(account), {\n    use: [localStorageMiddleware],\n  })\n\n  const { profile, hasRegistered } = data ?? ({ profile: null, hasRegistered: false } as GetProfileResponse)\n\n  const isLoading = status === FetchStatus.Fetching\n  const isInitialized = status === FetchStatus.Fetched || status === FetchStatus.Failed\n  const hasProfile = isInitialized && hasRegistered\n  const hasActiveProfile = hasProfile && profile?.isActive\n\n  return { profile, hasProfile, hasActiveProfile, isInitialized, isLoading, refresh: mutate }\n}\n","import { IPFS_GATEWAY } from '../index'\nimport { Team } from './types'\n\nconst teams: Team[] = [\n  {\n    id: 1,\n    name: 'Syrup Storm',\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\n    images: {\n      lg: 'syrup-storm-lg.png',\n      md: 'syrup-storm-md.png',\n      sm: 'syrup-storm-sm.png',\n      alt: 'syrup-storm-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png`,\n    },\n    background: 'syrup-storm-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 2,\n    name: 'Fearsome Flippers',\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\n    images: {\n      lg: 'fearsome-flippers-lg.png',\n      md: 'fearsome-flippers-md.png',\n      sm: 'fearsome-flippers-sm.png',\n      alt: 'fearsome-flippers-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png`,\n    },\n    background: 'fearsome-flippers-bg.svg',\n    textColor: '#FFFFFF',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 3,\n    name: 'Chaotic Cakers',\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\n    images: {\n      lg: 'chaotic-cakers-lg.png',\n      md: 'chaotic-cakers-md.png',\n      sm: 'chaotic-cakers-sm.png',\n      alt: 'chaotic-cakers-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png`,\n    },\n    background: 'chaotic-cakers-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n]\n\nexport default teams\n","import merge from 'lodash/merge'\nimport teamsList from 'config/constants/teams'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Team } from 'config/constants/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { TeamsById } from 'state/types'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport fromPairs from 'lodash/fromPairs'\n\nconst profileContract = getProfileContract()\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers.toNumber(),\n      points: numberPoints.toNumber(),\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = fromPairs(teamsList.map((team) => [team.id, team]))\n    const nbTeams = await profileContract.numberTeams()\n\n    const calls = []\n    for (let i = 1; i <= nbTeams.toNumber(); i++) {\n      calls.push({\n        address: getPancakeProfileAddress(),\n        name: 'getTeamProfile',\n        params: [i],\n      })\n    }\n    const teamData = await multicallv2({ abi: profileABI, calls })\n\n    const onChainTeamData = fromPairs(\n      teamData.map((team, index) => {\n        const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n        return [\n          index + 1,\n          {\n            name: teamName,\n            users: numberUsers.toNumber(),\n            points: numberPoints.toNumber(),\n            isJoinable,\n          },\n        ]\n      }),\n    )\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Campaign, TranslatableText } from 'config/constants/types'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: BigNumber\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 in the %title% IFO',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address],\n    }\n  })\n\n  const claimStatuses = (await multicallv2({\n    abi: pointCenterIfoABI,\n    calls: claimStatusCalls,\n    options: { requireSuccess: false },\n  })) as [boolean][] | null\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await multicallv2({\n    abi: pointCenterIfoABI,\n    calls: claimStatuses.reduce((accum, claimStatusArr, index) => {\n      if (claimStatusArr === null) {\n        return accum\n      }\n\n      const [claimStatus] = claimStatusArr\n\n      if (claimStatus === true) {\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [ifoCampaigns[index].address] }]\n      }\n\n      return accum\n    }, []),\n  })) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    const claimableCampaignId = claimableIfoDataItem.campaignId.toString()\n    if (!campaignMap.has(claimableCampaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableCampaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableCampaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableCampaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: claimableIfoDataItem.numberPoints.toNumber(),\n      },\n    ]\n  }, [])\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[9173],{\n\n/***/ 69820:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"T\": function() { return /* binding */ campaignMap; }\n/* harmony export */ });\n/**\n * id: The campaign id (required)\n * type: The type of the achievement\n * title: A string or an object to be translated.\n * Note: If the value is a string it is likely used as data in a translation object\n *\n * badge: Achievement avatar\n */ var campaigns = [\n    {\n        id: \"511110000\",\n        type: \"ifo\",\n        title: \"Kalmar\",\n        badge: \"ifo-kalm.svg\"\n    },\n    {\n        id: \"511100000\",\n        type: \"ifo\",\n        title: \"Hotcross\",\n        badge: \"ifo-hotcross.svg\"\n    },\n    {\n        id: \"511090000\",\n        type: \"ifo\",\n        title: \"Horizon Protocol\",\n        badge: \"ifo-hzn.svg\"\n    },\n    {\n        id: \"511080000\",\n        type: \"ifo\",\n        title: \"Belt\",\n        badge: \"ifo-belt.svg\"\n    },\n    {\n        id: \"511070000\",\n        type: \"ifo\",\n        title: \"Yieldwatch\",\n        badge: \"ifo-watch.svg\"\n    },\n    {\n        id: \"511060000\",\n        type: \"ifo\",\n        title: \"Berry\",\n        badge: \"ifo-bry.svg\"\n    },\n    {\n        id: \"511050000\",\n        type: \"ifo\",\n        title: \"Soteria\",\n        badge: \"ifo-wsote.svg\"\n    },\n    {\n        id: \"511040000\",\n        type: \"ifo\",\n        title: \"Helmet\",\n        badge: \"ifo-helmet.svg\"\n    },\n    {\n        id: \"511030000\",\n        type: \"ifo\",\n        title: \"Tenet\",\n        badge: \"ifo-ten.svg\"\n    },\n    {\n        id: \"511020000\",\n        type: \"ifo\",\n        title: \"Ditto\",\n        badge: \"ifo-ditto.svg\"\n    },\n    {\n        id: \"511010000\",\n        type: \"ifo\",\n        title: \"Blink\",\n        badge: \"ifo-blink.svg\"\n    },\n    {\n        id: \"512010001\",\n        type: \"teambattle\",\n        title: \"Easter Champion: Gold\",\n        badge: \"easter-champion-gold.svg\"\n    },\n    {\n        id: \"512010002\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Gold\",\n        badge: \"easter-top-500-gold.svg\"\n    },\n    {\n        id: \"512010003\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Gold\",\n        badge: \"easter-top-500-gold.svg\"\n    },\n    {\n        id: \"512010004\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Gold\",\n        badge: \"easter-top-500-gold.svg\"\n    },\n    {\n        id: \"512010005\",\n        type: \"teambattle\",\n        title: \"Easter Participant: Gold\",\n        badge: \"easter-participant-gold.svg\"\n    },\n    {\n        id: \"512010006\",\n        type: \"teambattle\",\n        title: \"Easter Champion: Silver\",\n        badge: \"easter-champion-silver.svg\"\n    },\n    {\n        id: \"512010007\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Silver\",\n        badge: \"easter-top-500-silver.svg\"\n    },\n    {\n        id: \"512010008\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Silver\",\n        badge: \"easter-top-500-silver.svg\"\n    },\n    {\n        id: \"512010009\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Silver\",\n        badge: \"easter-top-500-silver.svg\"\n    },\n    {\n        id: \"512010010\",\n        type: \"teambattle\",\n        title: \"Easter Participant: Silver\",\n        badge: \"easter-participant-silver.svg\"\n    },\n    {\n        id: \"512010011\",\n        type: \"teambattle\",\n        title: \"Easter Champion: Bronze\",\n        badge: \"easter-champion-bronze.svg\"\n    },\n    {\n        id: \"512010012\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Bronze\",\n        badge: \"easter-top-500-bronze.svg\"\n    },\n    {\n        id: \"512010013\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Bronze\",\n        badge: \"easter-top-500-bronze.svg\"\n    },\n    {\n        id: \"512010014\",\n        type: \"teambattle\",\n        title: \"Easter Top 500: Bronze\",\n        badge: \"easter-top-500-bronze.svg\"\n    },\n    {\n        id: \"512010015\",\n        type: \"teambattle\",\n        title: \"Easter Participant: Bronze\",\n        badge: \"easter-participant-bronze.svg\"\n    },\n    {\n        id: \"513010001\",\n        type: \"participation\",\n        title: \"Syrup Soaker\",\n        description: \"Took a dip in the early days of the Auto CAKE Pool\",\n        badge: \"syrup-soaker.svg\"\n    },\n    {\n        id: \"514010001\",\n        type: \"participation\",\n        title: \"Clairvoyant\",\n        description: \"Played a round of Prediction before round 12,120\",\n        badge: \"clairvoyant.svg\"\n    },\n    {\n        id: \"515010001\",\n        type: \"participation\",\n        title: \"Lottie\",\n        description: \"Joined a round in the early days of Lottery V2\",\n        badge: \"lottie.svg\"\n    },\n    {\n        id: \"515020001\",\n        type: \"participation\",\n        title: \"Lucky\",\n        description: \"Won a round in the early days of Lottery V2\",\n        badge: \"lucky.svg\"\n    },\n    {\n        id: \"515030001\",\n        type: \"participation\",\n        title: \"Baller\",\n        description: \"Top 100 ticket buyer in the early days of Lottery V2\",\n        badge: \"baller.svg\"\n    },\n    {\n        id: \"516010001\",\n        type: \"participation\",\n        title: \"1 Year\",\n        description: \"Joined PancakeSwap during the first year of our journey!\",\n        badge: \"1-year.svg\"\n    },\n    {\n        id: \"516020001\",\n        type: \"participation\",\n        title: \"2 Year\",\n        description: \"Celebrate our 2nd birthday with us\",\n        badge: \"2-year.svg\"\n    },\n    {\n        id: \"511120000\",\n        type: \"ifo\",\n        title: \"Duelist King\",\n        badge: \"ifo-dkt.svg\"\n    },\n    {\n        id: \"511130000\",\n        type: \"ifo\",\n        title: \"Mines of Dalarnia\",\n        badge: \"ifo-dar.svg\"\n    },\n    {\n        id: \"511140000\",\n        type: \"ifo\",\n        title: \"FC Porto Fan Token\",\n        badge: \"ifo-porto.svg\"\n    },\n    {\n        id: \"511150000\",\n        type: \"ifo\",\n        title: \"FC Santos Fan Token\",\n        badge: \"ifo-santos.svg\"\n    },\n    {\n        id: \"512020001\",\n        type: \"teambattle\",\n        title: \"Fan Token Champion: Gold\",\n        badge: \"fan-token-champion-gold.svg\"\n    },\n    {\n        id: \"512020002\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 10: Gold\",\n        badge: \"fan-token-top-10-gold.svg\"\n    },\n    {\n        id: \"512020003\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 100: Gold\",\n        badge: \"fan-token-top-100-gold.svg\"\n    },\n    {\n        id: \"512020004\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 500: Gold\",\n        badge: \"fan-token-top-500-gold.svg\"\n    },\n    {\n        id: \"512020005\",\n        type: \"teambattle\",\n        title: \"Fan Token Participant: Gold\",\n        badge: \"fan-token-participant-gold.svg\"\n    },\n    {\n        id: \"512020006\",\n        type: \"teambattle\",\n        title: \"Fan Token Champion: Silver\",\n        badge: \"fan-token-champion-silver.svg\"\n    },\n    {\n        id: \"512020007\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 10: Silver\",\n        badge: \"fan-token-top-10-silver.svg\"\n    },\n    {\n        id: \"512020008\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 100: Silver\",\n        badge: \"fan-token-top-100-silver.svg\"\n    },\n    {\n        id: \"512020009\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 500: Silver\",\n        badge: \"fan-token-top-500-silver.svg\"\n    },\n    {\n        id: \"512020010\",\n        type: \"teambattle\",\n        title: \"Fan Token Participant: Silver\",\n        badge: \"fan-token-participant-silver.svg\"\n    },\n    {\n        id: \"512020011\",\n        type: \"teambattle\",\n        title: \"Fan Token Champion: Bronze\",\n        badge: \"fan-token-champion-bronze.svg\"\n    },\n    {\n        id: \"512020012\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 10: Bronze\",\n        badge: \"fan-token-top-10-bronze.svg\"\n    },\n    {\n        id: \"512020013\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 100: Bronze\",\n        badge: \"fan-token-top-100-bronze.svg\"\n    },\n    {\n        id: \"512020014\",\n        type: \"teambattle\",\n        title: \"Fan Token Top 500: Bronze\",\n        badge: \"fan-token-top-500-bronze.svg\"\n    },\n    {\n        id: \"512020015\",\n        type: \"teambattle\",\n        title: \"Fan Token Participant: Bronze\",\n        badge: \"fan-token-participant-bronze.svg\"\n    },\n    {\n        id: \"511160000\",\n        type: \"ifo\",\n        title: \"Diviner Protocol\",\n        badge: \"ifo-dpt.svg\"\n    },\n    {\n        id: \"511170000\",\n        type: \"ifo\",\n        title: \"Froyo Games\",\n        badge: \"ifo-froyo.svg\"\n    },\n    {\n        id: \"511180000\",\n        type: \"ifo\",\n        title: \"Era7\",\n        badge: \"ifo-era.svg\"\n    },\n    {\n        id: \"511190000\",\n        type: \"ifo\",\n        title: \"Duet\",\n        badge: \"ifo-duet.svg\"\n    },\n    {\n        id: \"511200000\",\n        type: \"ifo\",\n        title: \"Trivia\",\n        badge: \"ifo-trivia.svg\"\n    },\n    {\n        id: \"511300000\",\n        type: \"ifo\",\n        title: \"Peel\",\n        badge: \"ifo-peel.svg\"\n    },\n    {\n        id: \"511400000\",\n        type: \"ifo\",\n        title: \"Wom\",\n        badge: \"ifo-wom.svg\"\n    },\n    {\n        id: \"511500000\",\n        type: \"ifo\",\n        title: \"Hoop\",\n        badge: \"ifo-hoop.svg\"\n    },\n    {\n        id: \"511600000\",\n        type: \"ifo\",\n        title: \"CO\",\n        badge: \"ifo-co.svg\"\n    },\n    {\n        id: \"511700000\",\n        type: \"ifo\",\n        title: \"KRS\",\n        badge: \"ifo-krs.svg\"\n    },\n    {\n        id: \"511800000\",\n        type: \"ifo\",\n        title: \"WMX\",\n        badge: \"ifo-wmx.svg\"\n    },\n    {\n        id: \"511900000\",\n        type: \"ifo\",\n        title: \"MGP\",\n        badge: \"ifo-mgp.svg\"\n    },\n    {\n        id: \"512030001\",\n        type: \"teambattle\",\n        title: \"Mobox Champion: Gold\",\n        badge: \"MBOX-champion-gold.svg\"\n    },\n    {\n        id: \"512030002\",\n        type: \"teambattle\",\n        title: \"Mobox Top 10: Gold\",\n        badge: \"MBOX-top-10-gold.svg\"\n    },\n    {\n        id: \"512030003\",\n        type: \"teambattle\",\n        title: \"Mobox Top 100: Gold\",\n        badge: \"MBOX-top-100-gold.svg\"\n    },\n    {\n        id: \"512030004\",\n        type: \"teambattle\",\n        title: \"Mobox Top 500: Gold\",\n        badge: \"MBOX-top-500-gold.svg\"\n    },\n    {\n        id: \"512030005\",\n        type: \"teambattle\",\n        title: \"Mobox Participant: Gold\",\n        badge: \"MBOX-participant-gold.svg\"\n    },\n    {\n        id: \"512030006\",\n        type: \"teambattle\",\n        title: \"Mobox Champion: Silver\",\n        badge: \"MBOX-champion-silver.svg\"\n    },\n    {\n        id: \"512030007\",\n        type: \"teambattle\",\n        title: \"Mobox Top 10: Silver\",\n        badge: \"MBOX-top-10-silver.svg\"\n    },\n    {\n        id: \"512030008\",\n        type: \"teambattle\",\n        title: \"Mobox Top 100: Silver\",\n        badge: \"MBOX-top-100-silver.svg\"\n    },\n    {\n        id: \"512030009\",\n        type: \"teambattle\",\n        title: \"Mobox Top 500: Silver\",\n        badge: \"MBOX-top-500-silver.svg\"\n    },\n    {\n        id: \"512030010\",\n        type: \"teambattle\",\n        title: \"Mobox Participant: Silver\",\n        badge: \"MBOX-participant-silver.svg\"\n    },\n    {\n        id: \"512030011\",\n        type: \"teambattle\",\n        title: \"Mobox Champion: Bronze\",\n        badge: \"MBOX-champion-bronze.svg\"\n    },\n    {\n        id: \"512030012\",\n        type: \"teambattle\",\n        title: \"Mobox Top 10: Bronze\",\n        badge: \"MBOX-top-10-bronze.svg\"\n    },\n    {\n        id: \"512030013\",\n        type: \"teambattle\",\n        title: \"Mobox Top 100: Bronze\",\n        badge: \"MBOX-top-100-bronze.svg\"\n    },\n    {\n        id: \"512030014\",\n        type: \"teambattle\",\n        title: \"Mobox Top 500: Bronze\",\n        badge: \"MBOX-top-500-bronze.svg\"\n    },\n    {\n        id: \"512030015\",\n        type: \"teambattle\",\n        title: \"Mobox Participant: Bronze\",\n        badge: \"MBOX-participant-bronze.svg\"\n    },\n    {\n        id: \"512040001\",\n        type: \"teambattle\",\n        title: \"MoD Champion: Gold\",\n        badge: \"MoD-champion-gold.svg\"\n    },\n    {\n        id: \"512040002\",\n        type: \"teambattle\",\n        title: \"MoD Top 10: Gold\",\n        badge: \"MoD-top-10-gold.svg\"\n    },\n    {\n        id: \"512040003\",\n        type: \"teambattle\",\n        title: \"MoD Top 100: Gold\",\n        badge: \"MoD-top-100-gold.svg\"\n    },\n    {\n        id: \"512040004\",\n        type: \"teambattle\",\n        title: \"MoD Top 500: Gold\",\n        badge: \"MoD-top-500-gold.svg\"\n    },\n    {\n        id: \"512040005\",\n        type: \"teambattle\",\n        title: \"MoD Participant: Gold\",\n        badge: \"MoD-participant-gold.svg\"\n    },\n    {\n        id: \"512040006\",\n        type: \"teambattle\",\n        title: \"MoD Champion: Silver\",\n        badge: \"MoD-champion-silver.svg\"\n    },\n    {\n        id: \"512040007\",\n        type: \"teambattle\",\n        title: \"MoD Top 10: Silver\",\n        badge: \"MoD-top-10-silver.svg\"\n    },\n    {\n        id: \"512040008\",\n        type: \"teambattle\",\n        title: \"MoD Top 100: Silver\",\n        badge: \"MoD-top-100-silver.svg\"\n    },\n    {\n        id: \"512040009\",\n        type: \"teambattle\",\n        title: \"MoD Top 500: Silver\",\n        badge: \"MoD-top-500-silver.svg\"\n    },\n    {\n        id: \"512040010\",\n        type: \"teambattle\",\n        title: \"MoD Participant: Silver\",\n        badge: \"MoD-participant-silver.svg\"\n    },\n    {\n        id: \"512040011\",\n        type: \"teambattle\",\n        title: \"MoD Champion: Bronze\",\n        badge: \"MoD-champion-bronze.svg\"\n    },\n    {\n        id: \"512040012\",\n        type: \"teambattle\",\n        title: \"MoD Top 10: Bronze\",\n        badge: \"MoD-top-10-bronze.svg\"\n    },\n    {\n        id: \"512040013\",\n        type: \"teambattle\",\n        title: \"MoD Top 100: Bronze\",\n        badge: \"MoD-top-100-bronze.svg\"\n    },\n    {\n        id: \"512040014\",\n        type: \"teambattle\",\n        title: \"MoD Top 500: Bronze\",\n        badge: \"MoD-top-500-bronze.svg\"\n    },\n    {\n        id: \"512040015\",\n        type: \"teambattle\",\n        title: \"MoD Participant: Bronze\",\n        badge: \"MoD-participant-bronze.svg\"\n    }, \n];\n/**\n * Transform the campaign config into a map. Keeps the config the same\n * as the others and allows easy access to a campaign by id\n */ var campaignMap = new Map();\ncampaigns.forEach(function(campaign) {\n    campaignMap.set(campaign.id, campaign);\n});\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (campaigns)));\n\n\n/***/ }),\n\n/***/ 69173:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"$v\": function() { return /* binding */ useAchievementsForAddress; },\n  \"Un\": function() { return /* binding */ useProfile; },\n  \"lC\": function() { return /* binding */ useProfileForAddress; }\n});\n\n// EXTERNAL MODULE: ../../node_modules/wagmi/dist/wagmi.esm.js + 25 modules\nvar wagmi_esm = __webpack_require__(51523);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_async_to_generator.mjs\nvar _async_to_generator = __webpack_require__(98788);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_tagged_template_literal.mjs\nvar _tagged_template_literal = __webpack_require__(92228);\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n// EXTERNAL MODULE: ../../node_modules/graphql-request/dist/index.js\nvar dist = __webpack_require__(6647);\n// EXTERNAL MODULE: ./src/config/constants/campaigns.ts\nvar campaigns = __webpack_require__(69820);\n// EXTERNAL MODULE: ./src/config/constants/endpoints.ts\nvar endpoints = __webpack_require__(10494);\n// EXTERNAL MODULE: ./src/utils/achievements.ts\nvar achievements = __webpack_require__(67624);\n;// CONCATENATED MODULE: ./src/state/achievements/helpers.ts\n\n\n\nfunction _templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n        query getUserPointIncreaseEvents($account: ID!) {\\n          user(id: $account) {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */ var getUserPointIncreaseEvents = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account) {\n        var user, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,dist.request)(endpoints/* GRAPH_API_PROFILE */.YP, (0,dist.gql)(_templateObject()), {\n                            account: account.toLowerCase()\n                        })\n                    ];\n                case 1:\n                    user = _state.sent().user;\n                    return [\n                        2,\n                        user.points\n                    ];\n                case 2:\n                    error = _state.sent();\n                    return [\n                        2,\n                        null\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getUserPointIncreaseEvents(account) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Gets all user point increase events and adds achievement meta\n */ var getAchievements = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account) {\n        var pointIncreaseEvents;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        getUserPointIncreaseEvents(account)\n                    ];\n                case 1:\n                    pointIncreaseEvents = _state.sent();\n                    if (!pointIncreaseEvents) {\n                        return [\n                            2,\n                            []\n                        ];\n                    }\n                    return [\n                        2,\n                        pointIncreaseEvents.reduce(function(accum, userPoint) {\n                            if (!campaigns/* campaignMap.has */.T.has(userPoint.campaignId)) {\n                                return accum;\n                            }\n                            var campaignMeta = campaigns/* campaignMap.get */.T.get(userPoint.campaignId);\n                            accum.push({\n                                id: userPoint.campaignId,\n                                type: campaignMeta.type,\n                                address: userPoint.id,\n                                title: (0,achievements/* getAchievementTitle */.hi)(campaignMeta),\n                                description: (0,achievements/* getAchievementDescription */.A9)(campaignMeta),\n                                badge: campaignMeta.badge,\n                                points: Number(userPoint.points)\n                            });\n                            return accum;\n                        }, [])\n                    ];\n            }\n        });\n    });\n    return function getAchievements(account) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n// EXTERNAL MODULE: ./src/config/constants/types.ts\nvar types = __webpack_require__(6429);\n// EXTERNAL MODULE: ../../node_modules/swr/dist/index.mjs\nvar swr_dist = __webpack_require__(49857);\n// EXTERNAL MODULE: ./src/hooks/useSWRContract.ts\nvar useSWRContract = __webpack_require__(30433);\n// EXTERNAL MODULE: ../../node_modules/swr/immutable/dist/index.mjs\nvar immutable_dist = __webpack_require__(2303);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_sliced_to_array.mjs\nvar _sliced_to_array = __webpack_require__(87394);\n// EXTERNAL MODULE: ./src/config/abi/pancakeProfile.json\nvar pancakeProfile = __webpack_require__(92335);\n// EXTERNAL MODULE: ./src/state/teams/helpers.ts + 1 modules\nvar helpers = __webpack_require__(62505);\n// EXTERNAL MODULE: ./src/state/nftMarket/helpers.ts + 1 modules\nvar nftMarket_helpers = __webpack_require__(46737);\n// EXTERNAL MODULE: ./src/utils/multicall.ts\nvar multicall = __webpack_require__(25152);\n// EXTERNAL MODULE: ./src/utils/addressHelpers.ts\nvar addressHelpers = __webpack_require__(70627);\n;// CONCATENATED MODULE: ./src/state/profile/helpers.ts\n\n\n\n\n\n\n\n\n\nvar transformProfileResponse = function(profileResponse) {\n    var userId = profileResponse[0], numberPoints = profileResponse[1], teamId = profileResponse[2], collectionAddress = profileResponse[3], tokenId = profileResponse[4], isActive = profileResponse[5];\n    return {\n        userId: userId.toNumber(),\n        points: numberPoints.toNumber(),\n        teamId: teamId.toNumber(),\n        tokenId: tokenId.toNumber(),\n        collectionAddress: collectionAddress,\n        isActive: isActive\n    };\n};\nvar getUsername = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(address) {\n        var response, ref, _username, username, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        fetch(\"\".concat(endpoints/* API_PROFILE */.dm, \"/api/users/\").concat(address.toLowerCase()))\n                    ];\n                case 1:\n                    response = _state.sent();\n                    if (!response.ok) {\n                        return [\n                            2,\n                            \"\"\n                        ];\n                    }\n                    return [\n                        4,\n                        response.json()\n                    ];\n                case 2:\n                    ref = _state.sent(), _username = ref.username, username = _username === void 0 ? \"\" : _username;\n                    return [\n                        2,\n                        username\n                    ];\n                case 3:\n                    error = _state.sent();\n                    return [\n                        2,\n                        \"\"\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getUsername(address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getProfile = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(address) {\n        var profileCalls, profileCallsResult, _profileCallsResult, ref, hasRegistered, profileResponse, ref1, userId, points, teamId, tokenId, collectionAddress, isActive, ref2, team, username, nftRes, nftToken, ref3, ref4, profile, e;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        3,\n                        ,\n                        4\n                    ]);\n                    profileCalls = [\n                        \"hasRegistered\",\n                        \"getUserProfile\"\n                    ].map(function(method) {\n                        return {\n                            address: (0,addressHelpers/* getPancakeProfileAddress */.Re)(),\n                            name: method,\n                            params: [\n                                address\n                            ]\n                        };\n                    });\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: pancakeProfile,\n                            calls: profileCalls,\n                            options: {\n                                requireSuccess: false\n                            }\n                        })\n                    ];\n                case 1:\n                    profileCallsResult = _state.sent();\n                    _profileCallsResult = (0,_sliced_to_array/* default */.Z)(profileCallsResult, 2), ref = (0,_sliced_to_array/* default */.Z)(_profileCallsResult[0], 1), hasRegistered = ref[0], profileResponse = _profileCallsResult[1];\n                    if (!hasRegistered) {\n                        return [\n                            2,\n                            {\n                                hasRegistered: hasRegistered,\n                                profile: null\n                            }\n                        ];\n                    }\n                    ref1 = transformProfileResponse(profileResponse), userId = ref1.userId, points = ref1.points, teamId = ref1.teamId, tokenId = ref1.tokenId, collectionAddress = ref1.collectionAddress, isActive = ref1.isActive;\n                    return [\n                        4,\n                        Promise.all([\n                            (0,helpers/* getTeam */.V)(teamId),\n                            getUsername(address),\n                            isActive ? (0,nftMarket_helpers/* getNftApi */.hb)(collectionAddress, tokenId.toString()) : Promise.resolve(null)\n                        ])\n                    ];\n                case 2:\n                    ref2 = _sliced_to_array/* default.apply */.Z.apply(void 0, [\n                        _state.sent(),\n                        3\n                    ]), team = ref2[0], username = ref2[1], nftRes = ref2[2];\n                    // If the profile is not active the tokenId returns 0, which is still a valid token id\n                    // so only fetch the nft data if active\n                    if (nftRes) {\n                        ;\n                        nftToken = {\n                            tokenId: nftRes.tokenId,\n                            name: nftRes.name,\n                            collectionName: nftRes.collection.name,\n                            collectionAddress: collectionAddress,\n                            description: nftRes.description,\n                            attributes: nftRes.attributes,\n                            createdAt: nftRes.createdAt,\n                            updatedAt: nftRes.updatedAt,\n                            image: {\n                                original: (ref3 = nftRes.image) === null || ref3 === void 0 ? void 0 : ref3.original,\n                                thumbnail: (ref4 = nftRes.image) === null || ref4 === void 0 ? void 0 : ref4.thumbnail\n                            }\n                        };\n                    }\n                    profile = {\n                        userId: userId,\n                        points: points,\n                        teamId: teamId,\n                        tokenId: tokenId,\n                        username: username,\n                        collectionAddress: collectionAddress,\n                        isActive: isActive,\n                        nft: nftToken,\n                        team: team\n                    };\n                    return [\n                        2,\n                        {\n                            hasRegistered: hasRegistered,\n                            profile: profile\n                        }\n                    ];\n                case 3:\n                    e = _state.sent();\n                    console.error(e);\n                    return [\n                        2,\n                        null\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getProfile(address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n;// CONCATENATED MODULE: ./src/state/profile/hooks.ts\n\n\n\n\n\n\n\nvar useProfileForAddress = function(address) {\n    var fetchConfiguration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        revalidateIfStale: true,\n        revalidateOnFocus: false,\n        revalidateOnReconnect: false\n    };\n    var ref = (0,swr_dist/* default */.ZP)(address ? [\n        address,\n        \"profile\"\n    ] : null, function() {\n        return getProfile(address);\n    }, fetchConfiguration), data = ref.data, status = ref.status, mutate = ref.mutate, isValidating = ref.isValidating;\n    var profile = (data !== null && data !== void 0 ? data : {\n        profile: null\n    }).profile;\n    return {\n        profile: profile,\n        isFetching: status === types/* FetchStatus.Fetching */.iF.Fetching,\n        isValidating: isValidating,\n        refresh: mutate\n    };\n};\nvar useAchievementsForAddress = function(address) {\n    var ref = (0,immutable_dist/* default */.Z)(address ? [\n        address,\n        \"achievements\"\n    ] : null, function() {\n        return getAchievements(address);\n    }), data = ref.data, status = ref.status, mutate = ref.mutate;\n    return {\n        achievements: data || [],\n        isFetching: status === types/* FetchStatus.Fetching */.iF.Fetching,\n        refresh: mutate\n    };\n};\nvar useProfile = function() {\n    var ref = (0,wagmi_esm/* useAccount */.mA)(), account = ref.address;\n    var ref1 = (0,immutable_dist/* default */.Z)(account ? [\n        account,\n        \"profile\"\n    ] : null, function() {\n        return getProfile(account);\n    }, {\n        use: [\n            useSWRContract/* localStorageMiddleware */.PI\n        ]\n    }), data = ref1.data, status = ref1.status, mutate = ref1.mutate;\n    var ref2 = data !== null && data !== void 0 ? data : {\n        profile: null,\n        hasRegistered: false\n    }, profile = ref2.profile, hasRegistered = ref2.hasRegistered;\n    var isLoading = status === types/* FetchStatus.Fetching */.iF.Fetching;\n    var isInitialized = status === types/* FetchStatus.Fetched */.iF.Fetched || status === types/* FetchStatus.Failed */.iF.Failed;\n    var hasProfile = isInitialized && hasRegistered;\n    var hasActiveProfile = hasProfile && (profile === null || profile === void 0 ? void 0 : profile.isActive);\n    return {\n        profile: profile,\n        hasProfile: hasProfile,\n        hasActiveProfile: hasActiveProfile,\n        isInitialized: isInitialized,\n        isLoading: isLoading,\n        refresh: mutate\n    };\n};\n\n\n/***/ }),\n\n/***/ 62505:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"V\": function() { return /* binding */ getTeam; },\n  \"L\": function() { return /* binding */ getTeams; }\n});\n\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_async_to_generator.mjs\nvar _async_to_generator = __webpack_require__(98788);\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n// EXTERNAL MODULE: ../../node_modules/lodash/merge.js\nvar merge = __webpack_require__(98537);\nvar merge_default = /*#__PURE__*/__webpack_require__.n(merge);\n// EXTERNAL MODULE: ./src/config/index.ts\nvar config = __webpack_require__(7599);\n;// CONCATENATED MODULE: ./src/config/constants/teams.ts\n\nvar teams = [\n    {\n        id: 1,\n        name: \"Syrup Storm\",\n        description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\n        images: {\n            lg: \"syrup-storm-lg.png\",\n            md: \"syrup-storm-md.png\",\n            sm: \"syrup-storm-sm.png\",\n            alt: \"syrup-storm-alt.png\",\n            ipfs: \"\".concat(config/* IPFS_GATEWAY */.Gs, \"/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png\")\n        },\n        background: \"syrup-storm-bg.svg\",\n        textColor: \"#191326\",\n        users: 0,\n        points: 0\n    },\n    {\n        id: 2,\n        name: \"Fearsome Flippers\",\n        description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\n        images: {\n            lg: \"fearsome-flippers-lg.png\",\n            md: \"fearsome-flippers-md.png\",\n            sm: \"fearsome-flippers-sm.png\",\n            alt: \"fearsome-flippers-alt.png\",\n            ipfs: \"\".concat(config/* IPFS_GATEWAY */.Gs, \"/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png\")\n        },\n        background: \"fearsome-flippers-bg.svg\",\n        textColor: \"#FFFFFF\",\n        users: 0,\n        points: 0\n    },\n    {\n        id: 3,\n        name: \"Chaotic Cakers\",\n        description: \"Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!\",\n        images: {\n            lg: \"chaotic-cakers-lg.png\",\n            md: \"chaotic-cakers-md.png\",\n            sm: \"chaotic-cakers-sm.png\",\n            alt: \"chaotic-cakers-alt.png\",\n            ipfs: \"\".concat(config/* IPFS_GATEWAY */.Gs, \"/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png\")\n        },\n        background: \"chaotic-cakers-bg.svg\",\n        textColor: \"#191326\",\n        users: 0,\n        points: 0\n    }, \n];\n/* harmony default export */ var constants_teams = (teams);\n\n// EXTERNAL MODULE: ./src/utils/contractHelpers.ts + 28 modules\nvar contractHelpers = __webpack_require__(80405);\n// EXTERNAL MODULE: ./src/utils/multicall.ts\nvar multicall = __webpack_require__(25152);\n// EXTERNAL MODULE: ./src/config/abi/pancakeProfile.json\nvar pancakeProfile = __webpack_require__(92335);\n// EXTERNAL MODULE: ./src/utils/addressHelpers.ts\nvar addressHelpers = __webpack_require__(70627);\n// EXTERNAL MODULE: ../../node_modules/lodash/fromPairs.js\nvar fromPairs = __webpack_require__(10017);\nvar fromPairs_default = /*#__PURE__*/__webpack_require__.n(fromPairs);\n;// CONCATENATED MODULE: ./src/state/teams/helpers.ts\n\n\n\n\n\n\n\n\n\nvar profileContract = (0,contractHelpers/* getProfileContract */.Y4)();\nvar getTeam = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(teamId) {\n        var ref, teamName, numberUsers, numberPoints, isJoinable, staticTeamInfo, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        profileContract.getTeamProfile(teamId)\n                    ];\n                case 1:\n                    ref = _state.sent(), teamName = ref[0], numberUsers = ref[2], numberPoints = ref[3], isJoinable = ref[4];\n                    staticTeamInfo = constants_teams.find(function(staticTeam) {\n                        return staticTeam.id === teamId;\n                    });\n                    return [\n                        2,\n                        merge_default()({}, staticTeamInfo, {\n                            isJoinable: isJoinable,\n                            name: teamName,\n                            users: numberUsers.toNumber(),\n                            points: numberPoints.toNumber()\n                        })\n                    ];\n                case 2:\n                    error = _state.sent();\n                    return [\n                        2,\n                        null\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getTeam(teamId) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */ var getTeams = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function() {\n        var teamsById, nbTeams, calls, i, teamData, onChainTeamData, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        3,\n                        ,\n                        4\n                    ]);\n                    teamsById = fromPairs_default()(constants_teams.map(function(team) {\n                        return [\n                            team.id,\n                            team\n                        ];\n                    }));\n                    return [\n                        4,\n                        profileContract.numberTeams()\n                    ];\n                case 1:\n                    nbTeams = _state.sent();\n                    calls = [];\n                    for(i = 1; i <= nbTeams.toNumber(); i++){\n                        calls.push({\n                            address: (0,addressHelpers/* getPancakeProfileAddress */.Re)(),\n                            name: \"getTeamProfile\",\n                            params: [\n                                i\n                            ]\n                        });\n                    }\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: pancakeProfile,\n                            calls: calls\n                        })\n                    ];\n                case 2:\n                    teamData = _state.sent();\n                    onChainTeamData = fromPairs_default()(teamData.map(function(team, index) {\n                        var teamName = team[0], numberUsers = team[2], numberPoints = team[3], isJoinable = team[4];\n                        return [\n                            index + 1,\n                            {\n                                name: teamName,\n                                users: numberUsers.toNumber(),\n                                points: numberPoints.toNumber(),\n                                isJoinable: isJoinable\n                            }, \n                        ];\n                    }));\n                    return [\n                        2,\n                        merge_default()({}, teamsById, onChainTeamData)\n                    ];\n                case 3:\n                    error = _state.sent();\n                    return [\n                        2,\n                        null\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getTeams() {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\n/***/ }),\n\n/***/ 67624:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"A9\": function() { return /* binding */ getAchievementDescription; },\n/* harmony export */   \"Cl\": function() { return /* binding */ getClaimableIfoData; },\n/* harmony export */   \"hi\": function() { return /* binding */ getAchievementTitle; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(98788);\n/* harmony import */ var _swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(87394);\n/* harmony import */ var _swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50930);\n/* harmony import */ var _swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5163);\n/* harmony import */ var config_constants_ifo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87840);\n/* harmony import */ var config_constants_campaigns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69820);\n/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25152);\n/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70627);\n/* harmony import */ var config_abi_pointCenterIfo_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(58750);\n\n\n\n\n\n\n\n\n\nvar getAchievementTitle = function(campaign) {\n    switch(campaign.type){\n        case \"ifo\":\n            return {\n                key: \"IFO Shopper: %title%\",\n                data: {\n                    title: campaign.title\n                }\n            };\n        default:\n            return campaign.title;\n    }\n};\nvar getAchievementDescription = function(campaign) {\n    switch(campaign.type){\n        case \"ifo\":\n            return {\n                key: \"Committed more than $5 in the %title% IFO\",\n                data: {\n                    title: campaign.title\n                }\n            };\n        default:\n            return campaign.description;\n    }\n};\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */ var getClaimableIfoData = function() {\n    var _ref = (0,_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)(function(account) {\n        var ifoCampaigns, claimStatusCalls, claimStatuses, claimableIfoData;\n        return (0,_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ifoCampaigns = config_constants_ifo__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].filter */ .Z.filter(function(ifoItem) {\n                        return ifoItem.campaignId !== undefined;\n                    });\n                    claimStatusCalls = ifoCampaigns.map(function(param) {\n                        var address = param.address;\n                        return {\n                            address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__/* .getPointCenterIfoAddress */ .Cf)(),\n                            name: \"checkClaimStatus\",\n                            params: [\n                                account,\n                                address\n                            ]\n                        };\n                    });\n                    return [\n                        4,\n                        (0,utils_multicall__WEBPACK_IMPORTED_MODULE_2__/* .multicallv2 */ .v)({\n                            abi: config_abi_pointCenterIfo_json__WEBPACK_IMPORTED_MODULE_4__,\n                            calls: claimStatusCalls,\n                            options: {\n                                requireSuccess: false\n                            }\n                        })\n                    ];\n                case 1:\n                    claimStatuses = _state.sent();\n                    return [\n                        4,\n                        (0,utils_multicall__WEBPACK_IMPORTED_MODULE_2__/* .multicallv2 */ .v)({\n                            abi: config_abi_pointCenterIfo_json__WEBPACK_IMPORTED_MODULE_4__,\n                            calls: claimStatuses.reduce(function(accum, claimStatusArr, index) {\n                                if (claimStatusArr === null) {\n                                    return accum;\n                                }\n                                var _claimStatusArr = (0,_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(claimStatusArr, 1), claimStatus = _claimStatusArr[0];\n                                if (claimStatus === true) {\n                                    return (0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_8__/* [\"default\"] */ .Z)(accum).concat([\n                                        {\n                                            address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__/* .getPointCenterIfoAddress */ .Cf)(),\n                                            name: \"ifos\",\n                                            params: [\n                                                ifoCampaigns[index].address\n                                            ]\n                                        }\n                                    ]);\n                                }\n                                return accum;\n                            }, [])\n                        })\n                    ];\n                case 2:\n                    claimableIfoData = _state.sent();\n                    // Transform response to an Achievement\n                    return [\n                        2,\n                        claimableIfoData.reduce(function(accum, claimableIfoDataItem) {\n                            var claimableCampaignId = claimableIfoDataItem.campaignId.toString();\n                            if (!config_constants_campaigns__WEBPACK_IMPORTED_MODULE_1__/* .campaignMap.has */ .T.has(claimableCampaignId)) {\n                                return accum;\n                            }\n                            var campaignMeta = config_constants_campaigns__WEBPACK_IMPORTED_MODULE_1__/* .campaignMap.get */ .T.get(claimableCampaignId);\n                            var address = ifoCampaigns.find(function(ifoCampaign) {\n                                return ifoCampaign.campaignId === claimableCampaignId;\n                            }).address;\n                            return (0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_8__/* [\"default\"] */ .Z)(accum).concat([\n                                {\n                                    address: address,\n                                    id: claimableCampaignId,\n                                    type: \"ifo\",\n                                    title: getAchievementTitle(campaignMeta),\n                                    description: getAchievementDescription(campaignMeta),\n                                    badge: campaignMeta.badge,\n                                    points: claimableIfoDataItem.numberPoints.toNumber()\n                                }, \n                            ]);\n                        }, [])\n                    ];\n            }\n        });\n    });\n    return function getClaimableIfoData(account) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","campaignMap","Map","id","type","title","badge","description","forEach","campaign","set","useAchievementsForAddress","useProfile","useProfileForAddress","wagmi_esm","_async_to_generator","_tagged_template_literal","tslib_es6","dist","campaigns","endpoints","achievements","_templateObject","data","Z","_ref","getUserPointIncreaseEvents","account","user","__generator","_state","label","trys","request","YP","gql","toLowerCase","sent","points","apply","arguments","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","T","has","campaignId","campaignMeta","get","address","hi","A9","Number","types","swr_dist","useSWRContract","immutable_dist","_sliced_to_array","pancakeProfile","helpers","nftMarket_helpers","multicall","addressHelpers","transformProfileResponse","profileResponse","userId","numberPoints","teamId","collectionAddress","tokenId","isActive","toNumber","getUsername","response","ref","_username","username","fetch","concat","dm","ok","json","getProfile","profileCalls","profileCallsResult","_profileCallsResult","hasRegistered","ref1","ref2","team","nftRes","nftToken","ref3","ref4","e","map","method","Re","name","params","v","abi","calls","options","requireSuccess","profile","Promise","all","V","hb","toString","resolve","collectionName","collection","attributes","createdAt","updatedAt","image","original","thumbnail","nft","console","error","fetchConfiguration","length","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","ZP","status","mutate","isValidating","isFetching","iF","Fetching","refresh","mA","use","PI","isLoading","isInitialized","Fetched","Failed","hasProfile","hasActiveProfile","getTeam","getTeams","merge","merge_default","n","config","teams","images","lg","md","sm","alt","ipfs","Gs","background","textColor","users","contractHelpers","fromPairs","fromPairs_default","profileContract","Y4","teamName","numberUsers","isJoinable","staticTeamInfo","getTeamProfile","constants_teams","find","staticTeam","teamsById","nbTeams","i","teamData","onChainTeamData","numberTeams","index","getAchievementDescription","getClaimableIfoData","getAchievementTitle","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__","_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_7__","_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_8__","_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__","config_constants_ifo__WEBPACK_IMPORTED_MODULE_0__","config_constants_campaigns__WEBPACK_IMPORTED_MODULE_1__","utils_multicall__WEBPACK_IMPORTED_MODULE_2__","utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__","config_abi_pointCenterIfo_json__WEBPACK_IMPORTED_MODULE_4__","key","ifoCampaigns","claimStatusCalls","claimStatuses","claimableIfoData","filter","ifoItem","undefined","param","Cf","claimStatusArr","_claimStatusArr","claimableIfoDataItem","claimableCampaignId","ifoCampaign"],"sourceRoot":""}