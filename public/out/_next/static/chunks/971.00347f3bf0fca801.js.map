{"version":3,"file":"static/chunks/971.00347f3bf0fca801.js","mappings":"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","sources":["webpack://_N_E/../../packages/token-lists/dist/getTokenList-T45DK2AY.mjs","webpack://_N_E/<anon>"],"sourcesContent":["// ../utils/uriToHttp.ts\nfunction uriToHttp(uri) {\n  var _a, _b;\n  const protocol = uri.split(\":\")[0].toLowerCase();\n  switch (protocol) {\n    case \"https\":\n      return [uri];\n    case \"http\":\n      return [`https${uri.substring(4)}`, uri];\n    case \"ipfs\":\n      const hash = (_a = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) == null ? void 0 : _a[2];\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n    case \"ipns\":\n      const name = (_b = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) == null ? void 0 : _b[2];\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n    default:\n      return [];\n  }\n}\n\n// react/getTokenList.ts\nimport Ajv from \"ajv\";\n\n// schema/pancakeswap.json\nvar pancakeswap_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"pancakeswap\",\n  title: \"PancakeSwap Token List\",\n  description: \"Schema for lists of tokens compatible with the PancakeSwap Interface, including Uniswap standard and PancakeSwap Aptos\",\n  definitions: {\n    Version: {\n      type: \"object\",\n      description: \"The version of the list, used in change detection\",\n      examples: [\n        {\n          major: 1,\n          minor: 0,\n          patch: 0\n        }\n      ],\n      additionalProperties: false,\n      properties: {\n        major: {\n          type: \"integer\",\n          description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n          minimum: 0,\n          examples: [1, 2]\n        },\n        minor: {\n          type: \"integer\",\n          description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        },\n        patch: {\n          type: \"integer\",\n          description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        }\n      },\n      required: [\"major\", \"minor\", \"patch\"]\n    },\n    TagIdentifier: {\n      type: \"string\",\n      description: \"The unique identifier of a tag\",\n      minLength: 1,\n      maxLength: 10,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"compound\", \"stablecoin\"]\n    },\n    ExtensionIdentifier: {\n      type: \"string\",\n      description: \"The name of a token extension property\",\n      minLength: 1,\n      maxLength: 40,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"color\", \"is_fee_on_transfer\", \"aliases\"]\n    },\n    ExtensionMap: {\n      type: \"object\",\n      description: \"An object containing any arbitrary or vendor-specific token metadata\",\n      maxProperties: 10,\n      propertyNames: {\n        $ref: \"#/definitions/ExtensionIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/ExtensionValue\"\n      },\n      examples: [\n        {\n          color: \"#000000\",\n          is_verified_by_me: true\n        },\n        {\n          \"x-bridged-addresses-by-chain\": {\n            \"1\": {\n              bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n              tokenAddress: \"0x4200000000000000000000000000000000000010\"\n            }\n          }\n        }\n      ]\n    },\n    ExtensionPrimitiveValue: {\n      anyOf: [\n        {\n          type: \"string\",\n          minLength: 1,\n          maxLength: 42,\n          examples: [\"#00000\"]\n        },\n        {\n          type: \"boolean\",\n          examples: [true]\n        },\n        {\n          type: \"number\",\n          examples: [15]\n        },\n        {\n          type: \"null\"\n        }\n      ]\n    },\n    ExtensionValue: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        },\n        {\n          type: \"object\",\n          maxProperties: 10,\n          propertyNames: {\n            $ref: \"#/definitions/ExtensionIdentifier\"\n          },\n          additionalProperties: {\n            $ref: \"#/definitions/ExtensionValueInner0\"\n          }\n        }\n      ]\n    },\n    ExtensionValueInner0: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        },\n        {\n          type: \"object\",\n          maxProperties: 10,\n          propertyNames: {\n            $ref: \"#/definitions/ExtensionIdentifier\"\n          },\n          additionalProperties: {\n            $ref: \"#/definitions/ExtensionValueInner1\"\n          }\n        }\n      ]\n    },\n    ExtensionValueInner1: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        }\n      ]\n    },\n    TagDefinition: {\n      type: \"object\",\n      description: \"Definition of a tag that can be associated with a token via its identifier\",\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: \"string\",\n          description: \"The name of the tag\",\n          pattern: \"^[ \\\\w]+$\",\n          minLength: 1,\n          maxLength: 20\n        },\n        description: {\n          type: \"string\",\n          description: \"A user-friendly description of the tag\",\n          pattern: \"^[ \\\\w\\\\.,:]+$\",\n          minLength: 1,\n          maxLength: 200\n        }\n      },\n      required: [\"name\", \"description\"],\n      examples: [\n        {\n          name: \"Stablecoin\",\n          description: \"A token with value pegged to another asset\"\n        }\n      ]\n    },\n    TokenInfo: {\n      type: \"object\",\n      description: \"Metadata for a single token in a token list\",\n      additionalProperties: false,\n      properties: {\n        chainId: {\n          type: \"integer\",\n          description: \"The chain ID of the Ethereum network where this token is deployed\",\n          minimum: 1,\n          examples: [1, 42]\n        },\n        address: {\n          type: \"string\",\n          description: \"The checksummed address of the token on the specified chain ID\",\n          pattern: \"^0x[a-fA-F0-9]{40}$\",\n          examples: [\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n        },\n        decimals: {\n          type: \"integer\",\n          description: \"The number of decimals for the token balance\",\n          minimum: 0,\n          maximum: 255,\n          examples: [18]\n        },\n        name: {\n          type: \"string\",\n          description: \"The name of the token\",\n          minLength: 1,\n          maxLength: 40,\n          pattern: \"^[ \\\\w.'+\\\\-%/\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF:&\\\\[\\\\]\\\\(\\\\)]+$\",\n          examples: [\"USD Coin\"]\n        },\n        symbol: {\n          type: \"string\",\n          description: \"The symbol for the token; must be alphanumeric\",\n          pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n          minLength: 1,\n          maxLength: 20,\n          examples: [\"USDC\"]\n        },\n        logoURI: {\n          type: \"string\",\n          description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n          format: \"uri\",\n          examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n        },\n        tags: {\n          type: \"array\",\n          description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n          items: {\n            $ref: \"#/definitions/TagIdentifier\"\n          },\n          maxItems: 10,\n          examples: [\"stablecoin\", \"compound\"]\n        },\n        extensions: {\n          $ref: \"#/definitions/ExtensionMap\"\n        }\n      },\n      required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n    },\n    AptosTokenInfo: {\n      type: \"object\",\n      description: \"Metadata for a single token in a token list\",\n      additionalProperties: false,\n      properties: {\n        chainId: {\n          type: \"integer\",\n          description: \"The chain ID of the Aptos network where this token is deployed, 0 is devent\",\n          minimum: 0,\n          examples: [1, 42]\n        },\n        address: {\n          type: \"string\",\n          description: \"The address of the coin on the specified chain ID\",\n          examples: [\"0x1::aptos_coin::AptosCoin\"]\n        },\n        decimals: {\n          type: \"integer\",\n          description: \"The number of decimals for the token balance\",\n          minimum: 0,\n          maximum: 255,\n          examples: [18]\n        },\n        name: {\n          type: \"string\",\n          description: \"The name of the token\",\n          minLength: 1,\n          maxLength: 40,\n          pattern: \"^[ \\\\w.'+\\\\-%/\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF:&\\\\[\\\\]\\\\(\\\\)]+$\",\n          examples: [\"USD Coin\"]\n        },\n        symbol: {\n          type: \"string\",\n          description: \"The symbol for the token; must be alphanumeric\",\n          pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n          minLength: 1,\n          maxLength: 20,\n          examples: [\"USDC\"]\n        },\n        logoURI: {\n          type: \"string\",\n          description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n          format: \"uri\",\n          examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n        },\n        tags: {\n          type: \"array\",\n          description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n          items: {\n            $ref: \"#/definitions/TagIdentifier\"\n          },\n          maxItems: 10,\n          examples: [\"stablecoin\", \"compound\"]\n        },\n        extensions: {\n          $ref: \"#/definitions/ExtensionMap\"\n        }\n      },\n      required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n    }\n  },\n  type: \"object\",\n  additionalProperties: false,\n  properties: {\n    name: {\n      type: \"string\",\n      description: \"The name of the token list\",\n      minLength: 1,\n      maxLength: 30,\n      pattern: \"^[\\\\w ]+$\",\n      examples: [\"My Token List\"]\n    },\n    timestamp: {\n      type: \"string\",\n      format: \"date-time\",\n      description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n    },\n    schema: {\n      type: \"string\"\n    },\n    version: {\n      $ref: \"#/definitions/Version\"\n    },\n    tokens: {\n      type: \"array\",\n      description: \"The list of tokens included in the list\",\n      minItems: 1,\n      maxItems: 1e4\n    },\n    keywords: {\n      type: \"array\",\n      description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n      items: {\n        type: \"string\",\n        description: \"A keyword to describe the contents of the list\",\n        minLength: 1,\n        maxLength: 20,\n        pattern: \"^[\\\\w ]+$\",\n        examples: [\"compound\", \"lending\", \"personal tokens\"]\n      },\n      maxItems: 20,\n      uniqueItems: true\n    },\n    tags: {\n      type: \"object\",\n      description: \"A mapping of tag identifiers to their name and description\",\n      propertyNames: {\n        $ref: \"#/definitions/TagIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/TagDefinition\"\n      },\n      maxProperties: 20,\n      examples: [\n        {\n          stablecoin: {\n            name: \"Stablecoin\",\n            description: \"A token with value pegged to another asset\"\n          }\n        }\n      ]\n    },\n    logoURI: {\n      type: \"string\",\n      description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n      format: \"uri\",\n      examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n    }\n  },\n  if: {\n    properties: { schema: { const: \"aptos\" } },\n    required: [\"name\", \"timestamp\", \"version\", \"tokens\", \"schema\"]\n  },\n  then: {\n    properties: {\n      tokens: {\n        items: {\n          $ref: \"#/definitions/AptosTokenInfo\"\n        },\n        type: \"array\",\n        description: \"The list of tokens included in the list\",\n        minItems: 1,\n        maxItems: 1e4\n      }\n    }\n  },\n  else: {\n    properties: {\n      tokens: {\n        items: {\n          $ref: \"#/definitions/TokenInfo\"\n        },\n        type: \"array\",\n        description: \"The list of tokens included in the list\",\n        minItems: 1,\n        maxItems: 1e4\n      }\n    }\n  },\n  required: [\"name\", \"timestamp\", \"version\", \"tokens\"]\n};\n\n// react/getTokenList.ts\nvar tokenListValidator = new Ajv({ allErrors: true }).compile(pancakeswap_default);\nasync function getTokenList(listUrl) {\n  var _a;\n  const urls = uriToHttp(listUrl);\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.error(\"Failed to fetch list\", listUrl, error);\n      if (isLast)\n        throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n    if (!response.ok) {\n      if (isLast)\n        throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n    const json = await response.json();\n    if (!tokenListValidator(json)) {\n      const validationErrors = ((_a = tokenListValidator.errors) == null ? void 0 : _a.reduce((memo, error) => {\n        const add = `${error.dataPath} ${error.message ?? \"\"}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, \"\")) ?? \"unknown error\";\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n    return json;\n  }\n  throw new Error(\"Unrecognized list URL protocol.\");\n}\nexport {\n  getTokenList as default,\n  tokenListValidator\n};\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[971],{\n\n/***/ 80971:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ getTokenList; },\n/* harmony export */   \"tokenListValidator\": function() { return /* binding */ tokenListValidator; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(98788);\n/* harmony import */ var _swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5163);\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84778);\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ajv__WEBPACK_IMPORTED_MODULE_0__);\n// ../utils/uriToHttp.ts\n\n\nfunction uriToHttp(uri) {\n    var _a, _b;\n    var protocol = uri.split(\":\")[0].toLowerCase();\n    switch(protocol){\n        case \"https\":\n            return [\n                uri\n            ];\n        case \"http\":\n            return [\n                \"https\".concat(uri.substring(4)),\n                uri\n            ];\n        case \"ipfs\":\n            var hash = (_a = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) == null ? void 0 : _a[2];\n            return [\n                \"https://cloudflare-ipfs.com/ipfs/\".concat(hash, \"/\"),\n                \"https://ipfs.io/ipfs/\".concat(hash, \"/\")\n            ];\n        case \"ipns\":\n            var name = (_b = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) == null ? void 0 : _b[2];\n            return [\n                \"https://cloudflare-ipfs.com/ipns/\".concat(name, \"/\"),\n                \"https://ipfs.io/ipns/\".concat(name, \"/\")\n            ];\n        default:\n            return [];\n    }\n}\n// react/getTokenList.ts\n\n// schema/pancakeswap.json\nvar pancakeswap_default = {\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    $id: \"pancakeswap\",\n    title: \"PancakeSwap Token List\",\n    description: \"Schema for lists of tokens compatible with the PancakeSwap Interface, including Uniswap standard and PancakeSwap Aptos\",\n    definitions: {\n        Version: {\n            type: \"object\",\n            description: \"The version of the list, used in change detection\",\n            examples: [\n                {\n                    major: 1,\n                    minor: 0,\n                    patch: 0\n                }\n            ],\n            additionalProperties: false,\n            properties: {\n                major: {\n                    type: \"integer\",\n                    description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n                    minimum: 0,\n                    examples: [\n                        1,\n                        2\n                    ]\n                },\n                minor: {\n                    type: \"integer\",\n                    description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n                    minimum: 0,\n                    examples: [\n                        0,\n                        1\n                    ]\n                },\n                patch: {\n                    type: \"integer\",\n                    description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n                    minimum: 0,\n                    examples: [\n                        0,\n                        1\n                    ]\n                }\n            },\n            required: [\n                \"major\",\n                \"minor\",\n                \"patch\"\n            ]\n        },\n        TagIdentifier: {\n            type: \"string\",\n            description: \"The unique identifier of a tag\",\n            minLength: 1,\n            maxLength: 10,\n            pattern: \"^[\\\\w]+$\",\n            examples: [\n                \"compound\",\n                \"stablecoin\"\n            ]\n        },\n        ExtensionIdentifier: {\n            type: \"string\",\n            description: \"The name of a token extension property\",\n            minLength: 1,\n            maxLength: 40,\n            pattern: \"^[\\\\w]+$\",\n            examples: [\n                \"color\",\n                \"is_fee_on_transfer\",\n                \"aliases\"\n            ]\n        },\n        ExtensionMap: {\n            type: \"object\",\n            description: \"An object containing any arbitrary or vendor-specific token metadata\",\n            maxProperties: 10,\n            propertyNames: {\n                $ref: \"#/definitions/ExtensionIdentifier\"\n            },\n            additionalProperties: {\n                $ref: \"#/definitions/ExtensionValue\"\n            },\n            examples: [\n                {\n                    color: \"#000000\",\n                    is_verified_by_me: true\n                },\n                {\n                    \"x-bridged-addresses-by-chain\": {\n                        \"1\": {\n                            bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n                            tokenAddress: \"0x4200000000000000000000000000000000000010\"\n                        }\n                    }\n                }\n            ]\n        },\n        ExtensionPrimitiveValue: {\n            anyOf: [\n                {\n                    type: \"string\",\n                    minLength: 1,\n                    maxLength: 42,\n                    examples: [\n                        \"#00000\"\n                    ]\n                },\n                {\n                    type: \"boolean\",\n                    examples: [\n                        true\n                    ]\n                },\n                {\n                    type: \"number\",\n                    examples: [\n                        15\n                    ]\n                },\n                {\n                    type: \"null\"\n                }\n            ]\n        },\n        ExtensionValue: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                },\n                {\n                    type: \"object\",\n                    maxProperties: 10,\n                    propertyNames: {\n                        $ref: \"#/definitions/ExtensionIdentifier\"\n                    },\n                    additionalProperties: {\n                        $ref: \"#/definitions/ExtensionValueInner0\"\n                    }\n                }\n            ]\n        },\n        ExtensionValueInner0: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                },\n                {\n                    type: \"object\",\n                    maxProperties: 10,\n                    propertyNames: {\n                        $ref: \"#/definitions/ExtensionIdentifier\"\n                    },\n                    additionalProperties: {\n                        $ref: \"#/definitions/ExtensionValueInner1\"\n                    }\n                }\n            ]\n        },\n        ExtensionValueInner1: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                }\n            ]\n        },\n        TagDefinition: {\n            type: \"object\",\n            description: \"Definition of a tag that can be associated with a token via its identifier\",\n            additionalProperties: false,\n            properties: {\n                name: {\n                    type: \"string\",\n                    description: \"The name of the tag\",\n                    pattern: \"^[ \\\\w]+$\",\n                    minLength: 1,\n                    maxLength: 20\n                },\n                description: {\n                    type: \"string\",\n                    description: \"A user-friendly description of the tag\",\n                    pattern: \"^[ \\\\w\\\\.,:]+$\",\n                    minLength: 1,\n                    maxLength: 200\n                }\n            },\n            required: [\n                \"name\",\n                \"description\"\n            ],\n            examples: [\n                {\n                    name: \"Stablecoin\",\n                    description: \"A token with value pegged to another asset\"\n                }\n            ]\n        },\n        TokenInfo: {\n            type: \"object\",\n            description: \"Metadata for a single token in a token list\",\n            additionalProperties: false,\n            properties: {\n                chainId: {\n                    type: \"integer\",\n                    description: \"The chain ID of the Ethereum network where this token is deployed\",\n                    minimum: 1,\n                    examples: [\n                        1,\n                        42\n                    ]\n                },\n                address: {\n                    type: \"string\",\n                    description: \"The checksummed address of the token on the specified chain ID\",\n                    pattern: \"^0x[a-fA-F0-9]{40}$\",\n                    examples: [\n                        \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n                    ]\n                },\n                decimals: {\n                    type: \"integer\",\n                    description: \"The number of decimals for the token balance\",\n                    minimum: 0,\n                    maximum: 255,\n                    examples: [\n                        18\n                    ]\n                },\n                name: {\n                    type: \"string\",\n                    description: \"The name of the token\",\n                    minLength: 1,\n                    maxLength: 40,\n                    pattern: \"^[ \\\\w.'+\\\\-%/\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff:&\\\\[\\\\]\\\\(\\\\)]+$\",\n                    examples: [\n                        \"USD Coin\"\n                    ]\n                },\n                symbol: {\n                    type: \"string\",\n                    description: \"The symbol for the token; must be alphanumeric\",\n                    pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n                    minLength: 1,\n                    maxLength: 20,\n                    examples: [\n                        \"USDC\"\n                    ]\n                },\n                logoURI: {\n                    type: \"string\",\n                    description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n                    format: \"uri\",\n                    examples: [\n                        \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n                    ]\n                },\n                tags: {\n                    type: \"array\",\n                    description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n                    items: {\n                        $ref: \"#/definitions/TagIdentifier\"\n                    },\n                    maxItems: 10,\n                    examples: [\n                        \"stablecoin\",\n                        \"compound\"\n                    ]\n                },\n                extensions: {\n                    $ref: \"#/definitions/ExtensionMap\"\n                }\n            },\n            required: [\n                \"chainId\",\n                \"address\",\n                \"decimals\",\n                \"name\",\n                \"symbol\"\n            ]\n        },\n        AptosTokenInfo: {\n            type: \"object\",\n            description: \"Metadata for a single token in a token list\",\n            additionalProperties: false,\n            properties: {\n                chainId: {\n                    type: \"integer\",\n                    description: \"The chain ID of the Aptos network where this token is deployed, 0 is devent\",\n                    minimum: 0,\n                    examples: [\n                        1,\n                        42\n                    ]\n                },\n                address: {\n                    type: \"string\",\n                    description: \"The address of the coin on the specified chain ID\",\n                    examples: [\n                        \"0x1::aptos_coin::AptosCoin\"\n                    ]\n                },\n                decimals: {\n                    type: \"integer\",\n                    description: \"The number of decimals for the token balance\",\n                    minimum: 0,\n                    maximum: 255,\n                    examples: [\n                        18\n                    ]\n                },\n                name: {\n                    type: \"string\",\n                    description: \"The name of the token\",\n                    minLength: 1,\n                    maxLength: 40,\n                    pattern: \"^[ \\\\w.'+\\\\-%/\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff:&\\\\[\\\\]\\\\(\\\\)]+$\",\n                    examples: [\n                        \"USD Coin\"\n                    ]\n                },\n                symbol: {\n                    type: \"string\",\n                    description: \"The symbol for the token; must be alphanumeric\",\n                    pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n                    minLength: 1,\n                    maxLength: 20,\n                    examples: [\n                        \"USDC\"\n                    ]\n                },\n                logoURI: {\n                    type: \"string\",\n                    description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n                    format: \"uri\",\n                    examples: [\n                        \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n                    ]\n                },\n                tags: {\n                    type: \"array\",\n                    description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n                    items: {\n                        $ref: \"#/definitions/TagIdentifier\"\n                    },\n                    maxItems: 10,\n                    examples: [\n                        \"stablecoin\",\n                        \"compound\"\n                    ]\n                },\n                extensions: {\n                    $ref: \"#/definitions/ExtensionMap\"\n                }\n            },\n            required: [\n                \"chainId\",\n                \"address\",\n                \"decimals\",\n                \"name\",\n                \"symbol\"\n            ]\n        }\n    },\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n        name: {\n            type: \"string\",\n            description: \"The name of the token list\",\n            minLength: 1,\n            maxLength: 30,\n            pattern: \"^[\\\\w ]+$\",\n            examples: [\n                \"My Token List\"\n            ]\n        },\n        timestamp: {\n            type: \"string\",\n            format: \"date-time\",\n            description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n        },\n        schema: {\n            type: \"string\"\n        },\n        version: {\n            $ref: \"#/definitions/Version\"\n        },\n        tokens: {\n            type: \"array\",\n            description: \"The list of tokens included in the list\",\n            minItems: 1,\n            maxItems: 1e4\n        },\n        keywords: {\n            type: \"array\",\n            description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n            items: {\n                type: \"string\",\n                description: \"A keyword to describe the contents of the list\",\n                minLength: 1,\n                maxLength: 20,\n                pattern: \"^[\\\\w ]+$\",\n                examples: [\n                    \"compound\",\n                    \"lending\",\n                    \"personal tokens\"\n                ]\n            },\n            maxItems: 20,\n            uniqueItems: true\n        },\n        tags: {\n            type: \"object\",\n            description: \"A mapping of tag identifiers to their name and description\",\n            propertyNames: {\n                $ref: \"#/definitions/TagIdentifier\"\n            },\n            additionalProperties: {\n                $ref: \"#/definitions/TagDefinition\"\n            },\n            maxProperties: 20,\n            examples: [\n                {\n                    stablecoin: {\n                        name: \"Stablecoin\",\n                        description: \"A token with value pegged to another asset\"\n                    }\n                }\n            ]\n        },\n        logoURI: {\n            type: \"string\",\n            description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n            format: \"uri\",\n            examples: [\n                \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n            ]\n        }\n    },\n    if: {\n        properties: {\n            schema: {\n                const: \"aptos\"\n            }\n        },\n        required: [\n            \"name\",\n            \"timestamp\",\n            \"version\",\n            \"tokens\",\n            \"schema\"\n        ]\n    },\n    then: {\n        properties: {\n            tokens: {\n                items: {\n                    $ref: \"#/definitions/AptosTokenInfo\"\n                },\n                type: \"array\",\n                description: \"The list of tokens included in the list\",\n                minItems: 1,\n                maxItems: 1e4\n            }\n        }\n    },\n    else: {\n        properties: {\n            tokens: {\n                items: {\n                    $ref: \"#/definitions/TokenInfo\"\n                },\n                type: \"array\",\n                description: \"The list of tokens included in the list\",\n                minItems: 1,\n                maxItems: 1e4\n            }\n        }\n    },\n    required: [\n        \"name\",\n        \"timestamp\",\n        \"version\",\n        \"tokens\"\n    ]\n};\n// react/getTokenList.ts\nvar tokenListValidator = new (ajv__WEBPACK_IMPORTED_MODULE_0___default())({\n    allErrors: true\n}).compile(pancakeswap_default);\nfunction getTokenList(listUrl) {\n    return _getTokenList.apply(this, arguments);\n}\nfunction _getTokenList() {\n    _getTokenList = (0,_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(function(listUrl) {\n        var _a, urls, i, url, isLast, response, error, json, ref, validationErrors;\n        return (0,_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    urls = uriToHttp(listUrl);\n                    i = 0;\n                    _state.label = 1;\n                case 1:\n                    if (!(i < urls.length)) return [\n                        3,\n                        8\n                    ];\n                    url = urls[i];\n                    isLast = i === urls.length - 1;\n                    response = void 0;\n                    _state.label = 2;\n                case 2:\n                    _state.trys.push([\n                        2,\n                        4,\n                        ,\n                        5\n                    ]);\n                    return [\n                        4,\n                        fetch(url)\n                    ];\n                case 3:\n                    response = _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 4:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch list\", listUrl, error);\n                    if (isLast) throw new Error(\"Failed to download list \".concat(listUrl));\n                    return [\n                        3,\n                        7\n                    ];\n                case 5:\n                    if (!response.ok) {\n                        if (isLast) throw new Error(\"Failed to download list \".concat(listUrl));\n                        return [\n                            3,\n                            7\n                        ];\n                    }\n                    return [\n                        4,\n                        response.json()\n                    ];\n                case 6:\n                    json = _state.sent();\n                    if (!tokenListValidator(json)) {\n                        ;\n                        validationErrors = (ref = (_a = tokenListValidator.errors) == null ? void 0 : _a.reduce(function(memo, error) {\n                            var _message;\n                            var add = \"\".concat(error.dataPath, \" \").concat((_message = error.message) !== null && _message !== void 0 ? _message : \"\");\n                            return memo.length > 0 ? \"\".concat(memo, \"; \").concat(add) : \"\".concat(add);\n                        }, \"\")) !== null && ref !== void 0 ? ref : \"unknown error\";\n                        throw new Error(\"Token list failed validation: \".concat(validationErrors));\n                    }\n                    return [\n                        2,\n                        json\n                    ];\n                case 7:\n                    i++;\n                    return [\n                        3,\n                        1\n                    ];\n                case 8:\n                    throw new Error(\"Unrecognized list URL protocol.\");\n            }\n        });\n    });\n    return _getTokenList.apply(this, arguments);\n}\n\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","r","d","getTokenList","tokenListValidator","ajv__WEBPACK_IMPORTED_MODULE_0___default","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_1__","_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_2__","ajv__WEBPACK_IMPORTED_MODULE_0__","n","allErrors","compile","$schema","$id","title","description","definitions","Version","type","examples","major","minor","patch","additionalProperties","properties","minimum","required","TagIdentifier","minLength","maxLength","pattern","ExtensionIdentifier","ExtensionMap","maxProperties","propertyNames","$ref","color","is_verified_by_me","bridgeAddress","tokenAddress","ExtensionPrimitiveValue","anyOf","ExtensionValue","ExtensionValueInner0","ExtensionValueInner1","TagDefinition","name","TokenInfo","chainId","address","decimals","maximum","symbol","logoURI","format","tags","items","maxItems","extensions","AptosTokenInfo","timestamp","schema","version","tokens","minItems","keywords","uniqueItems","stablecoin","if","const","then","else","listUrl","_getTokenList","apply","arguments","Z","_a","urls","i","url","isLast","response","error","json","ref","validationErrors","__generator","_state","label","uriToHttp","uri","_b","protocol","split","toLowerCase","concat","substring","hash","match","length","trys","fetch","sent","console","ok","errors","reduce","memo","_message","add","dataPath","message"],"sourceRoot":""}