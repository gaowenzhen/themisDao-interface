/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RegisterInfoStruct = {
  inviter: string;
  inviterCode: string;
  registrant: string;
  registrantCode: string;
};

export type RegisterInfoStructOutput = [string, string, string, string] & {
  inviter: string;
  inviterCode: string;
  registrant: string;
  registrantCode: string;
};

export interface RelationshipInterface extends utils.Interface {
  functions: {
    "AddressOf(string)": FunctionFragment;
    "RegisterInfoOf(address)": FunctionFragment;
    "changeDefaultInviter(address,string)": FunctionFragment;
    "defaultInviteCode()": FunctionFragment;
    "getInviter(address)": FunctionFragment;
    "getSubordinateByPage(address,uint256,uint256)": FunctionFragment;
    "getSubordinateCount(address)": FunctionFragment;
    "inviteCodeLength()": FunctionFragment;
    "inviteeMaxSize()": FunctionFragment;
    "owner()": FunctionFragment;
    "register(string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInviteeMaxSize(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AddressOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "RegisterInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDefaultInviter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultInviteCode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInviter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSubordinateByPage",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubordinateCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inviteCodeLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inviteeMaxSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteeMaxSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "AddressOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RegisterInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDefaultInviter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultInviteCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInviter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubordinateByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubordinateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inviteCodeLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inviteeMaxSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteeMaxSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Register(address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RegisterEvent = TypedEvent<
  [string, string, string],
  { inviter: string; registrant: string; registrantCode: string }
>;

export type RegisterEventFilter = TypedEventFilter<RegisterEvent>;

export interface Relationship extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelationshipInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AddressOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    RegisterInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        inviter: string;
        inviterCode: string;
        registrant: string;
        registrantCode: string;
      }
    >;

    changeDefaultInviter(
      _defaultInviter: string,
      _defaultInviteCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultInviteCode(overrides?: CallOverrides): Promise<[string]>;

    getInviter(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _inviter: string }>;

    getSubordinateByPage(
      _inviter: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RegisterInfoStructOutput[]] & {
        resultSize: BigNumber;
        subordinateArray: RegisterInfoStructOutput[];
      }
    >;

    getSubordinateCount(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inviteCodeLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    inviteeMaxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      _inviterCode: string,
      _registrantCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInviteeMaxSize(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AddressOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  RegisterInfoOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      inviter: string;
      inviterCode: string;
      registrant: string;
      registrantCode: string;
    }
  >;

  changeDefaultInviter(
    _defaultInviter: string,
    _defaultInviteCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultInviteCode(overrides?: CallOverrides): Promise<string>;

  getInviter(_invitee: string, overrides?: CallOverrides): Promise<string>;

  getSubordinateByPage(
    _inviter: string,
    _start: BigNumberish,
    _size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, RegisterInfoStructOutput[]] & {
      resultSize: BigNumber;
      subordinateArray: RegisterInfoStructOutput[];
    }
  >;

  getSubordinateCount(
    _inviter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inviteCodeLength(overrides?: CallOverrides): Promise<BigNumber>;

  inviteeMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    _inviterCode: string,
    _registrantCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInviteeMaxSize(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AddressOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    RegisterInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        inviter: string;
        inviterCode: string;
        registrant: string;
        registrantCode: string;
      }
    >;

    changeDefaultInviter(
      _defaultInviter: string,
      _defaultInviteCode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultInviteCode(overrides?: CallOverrides): Promise<string>;

    getInviter(_invitee: string, overrides?: CallOverrides): Promise<string>;

    getSubordinateByPage(
      _inviter: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RegisterInfoStructOutput[]] & {
        resultSize: BigNumber;
        subordinateArray: RegisterInfoStructOutput[];
      }
    >;

    getSubordinateCount(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inviteCodeLength(overrides?: CallOverrides): Promise<BigNumber>;

    inviteeMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    register(
      _inviterCode: string,
      _registrantCode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInviteeMaxSize(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Register(address,address,string)"(
      inviter?: string | null,
      registrant?: string | null,
      registrantCode?: string | null
    ): RegisterEventFilter;
    Register(
      inviter?: string | null,
      registrant?: string | null,
      registrantCode?: string | null
    ): RegisterEventFilter;
  };

  estimateGas: {
    AddressOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    RegisterInfoOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeDefaultInviter(
      _defaultInviter: string,
      _defaultInviteCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultInviteCode(overrides?: CallOverrides): Promise<BigNumber>;

    getInviter(_invitee: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSubordinateByPage(
      _inviter: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubordinateCount(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inviteCodeLength(overrides?: CallOverrides): Promise<BigNumber>;

    inviteeMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _inviterCode: string,
      _registrantCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInviteeMaxSize(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AddressOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RegisterInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDefaultInviter(
      _defaultInviter: string,
      _defaultInviteCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultInviteCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInviter(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubordinateByPage(
      _inviter: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubordinateCount(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inviteCodeLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inviteeMaxSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      _inviterCode: string,
      _registrantCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInviteeMaxSize(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
