/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SpeedLevelInfoStruct = {
  level: BigNumberish;
  burnAmount: BigNumberish;
  releaseSpeed: BigNumberish;
};

export type SpeedLevelInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
  level: BigNumber;
  burnAmount: BigNumber;
  releaseSpeed: BigNumber;
};

export type RewardInfoStruct = {
  rewardTotal: BigNumberish;
  earnedTotal: BigNumberish;
  recordTimestamp: BigNumberish;
  recordBlock: BigNumberish;
  lastEarnedBlock: BigNumberish;
  lastEarnedAmount: BigNumberish;
  speedLevel: BigNumberish;
};

export type RewardInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  rewardTotal: BigNumber;
  earnedTotal: BigNumber;
  recordTimestamp: BigNumber;
  recordBlock: BigNumber;
  lastEarnedBlock: BigNumber;
  lastEarnedAmount: BigNumber;
  speedLevel: BigNumber;
};

export interface StakingRewardReleaseInterface extends utils.Interface {
  functions: {
    "SC()": FunctionFragment;
    "Staking()": FunctionFragment;
    "THS()": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "alreadySynced(address)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "configLevel(uint256,uint256,uint256)": FunctionFragment;
    "configLevelBatch(uint256,uint256[],uint256[],uint256[])": FunctionFragment;
    "earnedTotal()": FunctionFragment;
    "getAllSpeedLevel()": FunctionFragment;
    "getRewardByPage(address,uint256,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "initializeFlag()": FunctionFragment;
    "isRequireSyncOldData(address)": FunctionFragment;
    "levelInfoOf(uint256)": FunctionFragment;
    "oldReleaseAddr()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardInfoOnBlock(address,uint256)": FunctionFragment;
    "speedUp(uint256,uint256)": FunctionFragment;
    "syncOldData()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SC", values?: undefined): string;
  encodeFunctionData(functionFragment: "Staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "THS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alreadySynced",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "configLevel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configLevelBatch",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSpeedLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardByPage",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRequireSyncOldData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "levelInfoOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oldReleaseAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardInfoOnBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "speedUp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "syncOldData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "SC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "THS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alreadySynced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configLevelBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSpeedLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequireSyncOldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldReleaseAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardInfoOnBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "speedUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncOldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AddReward(address,address,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "ConfigLevel(uint256,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SpeedUp(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigLevel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeedUp"): EventFragment;
}

export type AddRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; receiptor: string; amount: BigNumber }
>;

export type AddRewardEventFilter = TypedEventFilter<AddRewardEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { receiptor: string; recordBlock: BigNumber; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type ConfigLevelEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  { level: BigNumber; scAmount: BigNumber; speed: BigNumber; sender: string }
>;

export type ConfigLevelEventFilter = TypedEventFilter<ConfigLevelEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SpeedUpEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    receiptor: string;
    recordBlock: BigNumber;
    newLevel: BigNumber;
    sender: string;
  }
>;

export type SpeedUpEventFilter = TypedEventFilter<SpeedUpEvent>;

export interface StakingRewardRelease extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingRewardReleaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SC(overrides?: CallOverrides): Promise<[string]>;

    Staking(overrides?: CallOverrides): Promise<[string]>;

    THS(overrides?: CallOverrides): Promise<[string]>;

    addReward(
      _receiptor: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    alreadySynced(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    claim(
      _recordBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configLevel(
      _level: BigNumberish,
      _burnScAmount: BigNumberish,
      _speed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configLevelBatch(
      _size: BigNumberish,
      _levels: BigNumberish[],
      _burnScAmounts: BigNumberish[],
      _speeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earnedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllSpeedLevel(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, SpeedLevelInfoStructOutput[]] & {
        size_: BigNumber;
        levelList_: SpeedLevelInfoStructOutput[];
      }
    >;

    getRewardByPage(
      _receiptor: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RewardInfoStructOutput[], BigNumber[]] & {
        resultSize_: BigNumber;
        rewardInfoList_: RewardInfoStructOutput[];
        pendingList_: BigNumber[];
      }
    >;

    initialize(
      _THS: string,
      _SC: string,
      _Staking: string,
      _oldRelease: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeFlag(overrides?: CallOverrides): Promise<[boolean]>;

    isRequireSyncOldData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levelInfoOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        burnAmount: BigNumber;
        releaseSpeed: BigNumber;
      }
    >;

    oldReleaseAddr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _receiptor: string,
      _recordBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingReward_: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardInfoOnBlock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTotal: BigNumber;
        earnedTotal: BigNumber;
        recordTimestamp: BigNumber;
        recordBlock: BigNumber;
        lastEarnedBlock: BigNumber;
        lastEarnedAmount: BigNumber;
        speedLevel: BigNumber;
      }
    >;

    speedUp(
      _block: BigNumberish,
      _expectSpeedLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncOldData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SC(overrides?: CallOverrides): Promise<string>;

  Staking(overrides?: CallOverrides): Promise<string>;

  THS(overrides?: CallOverrides): Promise<string>;

  addReward(
    _receiptor: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  alreadySynced(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  claim(
    _recordBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configLevel(
    _level: BigNumberish,
    _burnScAmount: BigNumberish,
    _speed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configLevelBatch(
    _size: BigNumberish,
    _levels: BigNumberish[],
    _burnScAmounts: BigNumberish[],
    _speeds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  getAllSpeedLevel(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, SpeedLevelInfoStructOutput[]] & {
      size_: BigNumber;
      levelList_: SpeedLevelInfoStructOutput[];
    }
  >;

  getRewardByPage(
    _receiptor: string,
    _start: BigNumberish,
    _size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, RewardInfoStructOutput[], BigNumber[]] & {
      resultSize_: BigNumber;
      rewardInfoList_: RewardInfoStructOutput[];
      pendingList_: BigNumber[];
    }
  >;

  initialize(
    _THS: string,
    _SC: string,
    _Staking: string,
    _oldRelease: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeFlag(overrides?: CallOverrides): Promise<boolean>;

  isRequireSyncOldData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levelInfoOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      level: BigNumber;
      burnAmount: BigNumber;
      releaseSpeed: BigNumber;
    }
  >;

  oldReleaseAddr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _receiptor: string,
    _recordBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardInfoOnBlock(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardTotal: BigNumber;
      earnedTotal: BigNumber;
      recordTimestamp: BigNumber;
      recordBlock: BigNumber;
      lastEarnedBlock: BigNumber;
      lastEarnedAmount: BigNumber;
      speedLevel: BigNumber;
    }
  >;

  speedUp(
    _block: BigNumberish,
    _expectSpeedLevel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncOldData(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SC(overrides?: CallOverrides): Promise<string>;

    Staking(overrides?: CallOverrides): Promise<string>;

    THS(overrides?: CallOverrides): Promise<string>;

    addReward(
      _receiptor: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    alreadySynced(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    claim(_recordBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    configLevel(
      _level: BigNumberish,
      _burnScAmount: BigNumberish,
      _speed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configLevelBatch(
      _size: BigNumberish,
      _levels: BigNumberish[],
      _burnScAmounts: BigNumberish[],
      _speeds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    earnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSpeedLevel(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, SpeedLevelInfoStructOutput[]] & {
        size_: BigNumber;
        levelList_: SpeedLevelInfoStructOutput[];
      }
    >;

    getRewardByPage(
      _receiptor: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RewardInfoStructOutput[], BigNumber[]] & {
        resultSize_: BigNumber;
        rewardInfoList_: RewardInfoStructOutput[];
        pendingList_: BigNumber[];
      }
    >;

    initialize(
      _THS: string,
      _SC: string,
      _Staking: string,
      _oldRelease: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeFlag(overrides?: CallOverrides): Promise<boolean>;

    isRequireSyncOldData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelInfoOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        burnAmount: BigNumber;
        releaseSpeed: BigNumber;
      }
    >;

    oldReleaseAddr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _receiptor: string,
      _recordBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardInfoOnBlock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTotal: BigNumber;
        earnedTotal: BigNumber;
        recordTimestamp: BigNumber;
        recordBlock: BigNumber;
        lastEarnedBlock: BigNumber;
        lastEarnedAmount: BigNumber;
        speedLevel: BigNumber;
      }
    >;

    speedUp(
      _block: BigNumberish,
      _expectSpeedLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    syncOldData(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddReward(address,address,uint256)"(
      sender?: string | null,
      receiptor?: string | null,
      amount?: BigNumberish | null
    ): AddRewardEventFilter;
    AddReward(
      sender?: string | null,
      receiptor?: string | null,
      amount?: BigNumberish | null
    ): AddRewardEventFilter;

    "Claim(address,uint256,uint256)"(
      receiptor?: string | null,
      recordBlock?: BigNumberish | null,
      amount?: BigNumberish | null
    ): ClaimEventFilter;
    Claim(
      receiptor?: string | null,
      recordBlock?: BigNumberish | null,
      amount?: BigNumberish | null
    ): ClaimEventFilter;

    "ConfigLevel(uint256,uint256,uint256,address)"(
      level?: BigNumberish | null,
      scAmount?: BigNumberish | null,
      speed?: BigNumberish | null,
      sender?: null
    ): ConfigLevelEventFilter;
    ConfigLevel(
      level?: BigNumberish | null,
      scAmount?: BigNumberish | null,
      speed?: BigNumberish | null,
      sender?: null
    ): ConfigLevelEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SpeedUp(address,uint256,uint256,address)"(
      receiptor?: string | null,
      recordBlock?: BigNumberish | null,
      newLevel?: BigNumberish | null,
      sender?: null
    ): SpeedUpEventFilter;
    SpeedUp(
      receiptor?: string | null,
      recordBlock?: BigNumberish | null,
      newLevel?: BigNumberish | null,
      sender?: null
    ): SpeedUpEventFilter;
  };

  estimateGas: {
    SC(overrides?: CallOverrides): Promise<BigNumber>;

    Staking(overrides?: CallOverrides): Promise<BigNumber>;

    THS(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      _receiptor: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    alreadySynced(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _recordBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configLevel(
      _level: BigNumberish,
      _burnScAmount: BigNumberish,
      _speed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configLevelBatch(
      _size: BigNumberish,
      _levels: BigNumberish[],
      _burnScAmounts: BigNumberish[],
      _speeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSpeedLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardByPage(
      _receiptor: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _THS: string,
      _SC: string,
      _Staking: string,
      _oldRelease: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeFlag(overrides?: CallOverrides): Promise<BigNumber>;

    isRequireSyncOldData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelInfoOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oldReleaseAddr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _receiptor: string,
      _recordBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardInfoOnBlock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    speedUp(
      _block: BigNumberish,
      _expectSpeedLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncOldData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    THS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      _receiptor: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    alreadySynced(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _recordBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configLevel(
      _level: BigNumberish,
      _burnScAmount: BigNumberish,
      _speed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configLevelBatch(
      _size: BigNumberish,
      _levels: BigNumberish[],
      _burnScAmounts: BigNumberish[],
      _speeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earnedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllSpeedLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardByPage(
      _receiptor: string,
      _start: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _THS: string,
      _SC: string,
      _Staking: string,
      _oldRelease: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeFlag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRequireSyncOldData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelInfoOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldReleaseAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _receiptor: string,
      _recordBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardInfoOnBlock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    speedUp(
      _block: BigNumberish,
      _expectSpeedLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncOldData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
