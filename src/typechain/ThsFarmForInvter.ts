/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ThsFarmForInvterInterface extends utils.Interface {
  functions: {
    "CALCULATE_DECIMAL()": FunctionFragment;
    "ONE_THS()": FunctionFragment;
    "ONE_USDT()": FunctionFragment;
    "calculateRebaseRewardTwoDay(address)": FunctionFragment;
    "calculateRewardPerBlockSpecificInvitee(address)": FunctionFragment;
    "changeStakeAmount(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimSpecificInvitee(address)": FunctionFragment;
    "initFlag()": FunctionFragment;
    "initValue(address,address,address,address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairAddr()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "pendingRewardSpecificInvitee(address,address)": FunctionFragment;
    "rebaseTimesTwoDay()": FunctionFragment;
    "relationshipAdr()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDec()": FunctionFragment;
    "rewardInfoOf(address,address)": FunctionFragment;
    "rewardLockBlocks()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "sThsAddr()": FunctionFragment;
    "setRewardLockBlocks(uint256)": FunctionFragment;
    "stakeThresholdToEarn()": FunctionFragment;
    "stakedInfoOf(address)": FunctionFragment;
    "supportClaim()": FunctionFragment;
    "thsAddr()": FunctionFragment;
    "thsStaking()": FunctionFragment;
    "toggleSupportClaim()": FunctionFragment;
    "totalBlockTwoDay()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdtAddr()": FunctionFragment;
    "viewAsUsdt(uint256)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CALCULATE_DECIMAL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_THS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRebaseRewardTwoDay",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardPerBlockSpecificInvitee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakeAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimSpecificInvitee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initFlag", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initValue",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewardSpecificInvitee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebaseTimesTwoDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relationshipAdr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardDec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardInfoOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardLockBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sThsAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRewardLockBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeThresholdToEarn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportClaim",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "thsAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thsStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSupportClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlockTwoDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdtAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewAsUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALCULATE_DECIMAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_THS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRebaseRewardTwoDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardPerBlockSpecificInvitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSpecificInvitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initFlag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardSpecificInvitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebaseTimesTwoDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relationshipAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardDec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardLockBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sThsAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardLockBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeThresholdToEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thsAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "thsStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSupportClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlockTwoDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewAsUsdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ChangeStakeAmount(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeStakeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ChangeStakeAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { staker: string; oldAmount: BigNumber; newAmount: BigNumber }
>;

export type ChangeStakeAmountEventFilter =
  TypedEventFilter<ChangeStakeAmountEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { staker: string; reward: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ThsFarmForInvter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThsFarmForInvterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALCULATE_DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_THS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_USDT(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRebaseRewardTwoDay(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    calculateRewardPerBlockSpecificInvitee(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardPerBlock_: BigNumber }>;

    changeStakeAmount(
      _staker: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSpecificInvitee(
      _invitee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initFlag(overrides?: CallOverrides): Promise<[boolean]>;

    initValue(
      _pair: string,
      _ths: string,
      _sThs: string,
      _usdt: string,
      _staking: string,
      _relationship: string,
      _rewardLockBlocks: BigNumberish,
      _totalBlockTwoDay: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairAddr(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingReward_: BigNumber }>;

    pendingRewardSpecificInvitee(
      _inviter: string,
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingReward_: BigNumber }>;

    rebaseTimesTwoDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    relationshipAdr(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDec(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardInfoOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        earnedTotal: BigNumber;
        lastEarnedBlock: BigNumber;
        lastEarnedAmount: BigNumber;
        lastInviterStakedTHS: BigNumber;
        lastInviterStakedTHSAsUsdt: BigNumber;
        lastInviteeStakedTHS: BigNumber;
        lastInviteeStakedTHSAsUsdt: BigNumber;
      }
    >;

    rewardLockBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    sThsAddr(overrides?: CallOverrides): Promise<[string]>;

    setRewardLockBlocks(
      _blockCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeThresholdToEarn(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakedInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentStakedTHS: BigNumber;
        earnedTotal: BigNumber;
        amountChangedBlock: BigNumber;
      }
    >;

    supportClaim(overrides?: CallOverrides): Promise<[boolean]>;

    thsAddr(overrides?: CallOverrides): Promise<[string]>;

    thsStaking(overrides?: CallOverrides): Promise<[string]>;

    toggleSupportClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBlockTwoDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdtAddr(overrides?: CallOverrides): Promise<[string]>;

    viewAsUsdt(
      _thsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdtAmount_: BigNumber }>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CALCULATE_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_THS(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_USDT(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRebaseRewardTwoDay(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardPerBlockSpecificInvitee(
    _invitee: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeStakeAmount(
    _staker: string,
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSpecificInvitee(
    _invitee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initFlag(overrides?: CallOverrides): Promise<boolean>;

  initValue(
    _pair: string,
    _ths: string,
    _sThs: string,
    _usdt: string,
    _staking: string,
    _relationship: string,
    _rewardLockBlocks: BigNumberish,
    _totalBlockTwoDay: BigNumberish,
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairAddr(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _inviter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingRewardSpecificInvitee(
    _inviter: string,
    _invitee: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebaseTimesTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

  relationshipAdr(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDec(overrides?: CallOverrides): Promise<BigNumber>;

  rewardInfoOf(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      earnedTotal: BigNumber;
      lastEarnedBlock: BigNumber;
      lastEarnedAmount: BigNumber;
      lastInviterStakedTHS: BigNumber;
      lastInviterStakedTHSAsUsdt: BigNumber;
      lastInviteeStakedTHS: BigNumber;
      lastInviteeStakedTHSAsUsdt: BigNumber;
    }
  >;

  rewardLockBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  sThsAddr(overrides?: CallOverrides): Promise<string>;

  setRewardLockBlocks(
    _blockCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeThresholdToEarn(overrides?: CallOverrides): Promise<BigNumber>;

  stakedInfoOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentStakedTHS: BigNumber;
      earnedTotal: BigNumber;
      amountChangedBlock: BigNumber;
    }
  >;

  supportClaim(overrides?: CallOverrides): Promise<boolean>;

  thsAddr(overrides?: CallOverrides): Promise<string>;

  thsStaking(overrides?: CallOverrides): Promise<string>;

  toggleSupportClaim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBlockTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdtAddr(overrides?: CallOverrides): Promise<string>;

  viewAsUsdt(
    _thsAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawToken(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALCULATE_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_THS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_USDT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRebaseRewardTwoDay(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardPerBlockSpecificInvitee(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeStakeAmount(
      _staker: string,
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimSpecificInvitee(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initFlag(overrides?: CallOverrides): Promise<boolean>;

    initValue(
      _pair: string,
      _ths: string,
      _sThs: string,
      _usdt: string,
      _staking: string,
      _relationship: string,
      _rewardLockBlocks: BigNumberish,
      _totalBlockTwoDay: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairAddr(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRewardSpecificInvitee(
      _inviter: string,
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebaseTimesTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

    relationshipAdr(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardDec(overrides?: CallOverrides): Promise<BigNumber>;

    rewardInfoOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        earnedTotal: BigNumber;
        lastEarnedBlock: BigNumber;
        lastEarnedAmount: BigNumber;
        lastInviterStakedTHS: BigNumber;
        lastInviterStakedTHSAsUsdt: BigNumber;
        lastInviteeStakedTHS: BigNumber;
        lastInviteeStakedTHSAsUsdt: BigNumber;
      }
    >;

    rewardLockBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    sThsAddr(overrides?: CallOverrides): Promise<string>;

    setRewardLockBlocks(
      _blockCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeThresholdToEarn(overrides?: CallOverrides): Promise<BigNumber>;

    stakedInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentStakedTHS: BigNumber;
        earnedTotal: BigNumber;
        amountChangedBlock: BigNumber;
      }
    >;

    supportClaim(overrides?: CallOverrides): Promise<boolean>;

    thsAddr(overrides?: CallOverrides): Promise<string>;

    thsStaking(overrides?: CallOverrides): Promise<string>;

    toggleSupportClaim(overrides?: CallOverrides): Promise<void>;

    totalBlockTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdtAddr(overrides?: CallOverrides): Promise<string>;

    viewAsUsdt(
      _thsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeStakeAmount(address,uint256,uint256)"(
      staker?: string | null,
      oldAmount?: BigNumberish | null,
      newAmount?: BigNumberish | null
    ): ChangeStakeAmountEventFilter;
    ChangeStakeAmount(
      staker?: string | null,
      oldAmount?: BigNumberish | null,
      newAmount?: BigNumberish | null
    ): ChangeStakeAmountEventFilter;

    "Claim(address,uint256)"(
      staker?: string | null,
      reward?: BigNumberish | null
    ): ClaimEventFilter;
    Claim(
      staker?: string | null,
      reward?: BigNumberish | null
    ): ClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CALCULATE_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_THS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_USDT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRebaseRewardTwoDay(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardPerBlockSpecificInvitee(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeStakeAmount(
      _staker: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSpecificInvitee(
      _invitee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initFlag(overrides?: CallOverrides): Promise<BigNumber>;

    initValue(
      _pair: string,
      _ths: string,
      _sThs: string,
      _usdt: string,
      _staking: string,
      _relationship: string,
      _rewardLockBlocks: BigNumberish,
      _totalBlockTwoDay: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairAddr(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRewardSpecificInvitee(
      _inviter: string,
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebaseTimesTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

    relationshipAdr(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDec(overrides?: CallOverrides): Promise<BigNumber>;

    rewardInfoOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardLockBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    sThsAddr(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardLockBlocks(
      _blockCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeThresholdToEarn(overrides?: CallOverrides): Promise<BigNumber>;

    stakedInfoOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportClaim(overrides?: CallOverrides): Promise<BigNumber>;

    thsAddr(overrides?: CallOverrides): Promise<BigNumber>;

    thsStaking(overrides?: CallOverrides): Promise<BigNumber>;

    toggleSupportClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBlockTwoDay(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdtAddr(overrides?: CallOverrides): Promise<BigNumber>;

    viewAsUsdt(
      _thsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALCULATE_DECIMAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_THS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRebaseRewardTwoDay(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardPerBlockSpecificInvitee(
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeStakeAmount(
      _staker: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSpecificInvitee(
      _invitee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initFlag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initValue(
      _pair: string,
      _ths: string,
      _sThs: string,
      _usdt: string,
      _staking: string,
      _relationship: string,
      _rewardLockBlocks: BigNumberish,
      _totalBlockTwoDay: BigNumberish,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewardSpecificInvitee(
      _inviter: string,
      _invitee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebaseTimesTwoDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relationshipAdr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardInfoOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardLockBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sThsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardLockBlocks(
      _blockCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeThresholdToEarn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedInfoOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thsStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleSupportClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBlockTwoDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdtAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewAsUsdt(
      _thsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
